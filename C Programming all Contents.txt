
				---- C programming ----

	Computer: It is data processing  unit.

			    Input --> [ ]  --> Output
			   (Data)  Processing  (Information) 
				     Unit		


			data: Facts, Properties character. of entity under consid. 

			Info: well processed data.

	Computer is 2 state, Multipurpose, programmable, electronic device, Which takes input from user, store it, process on it
	and gives the output in desired format.

							Computer 
						            |
						---------------------------------
						|				|
					   Hardware			     Software
						|				|
				----------------------			--------------------------
				|		     |			|			 |	
			       CPU            Peripherial 	     System		     Application
				|		Devices		     Soft.		     Soft.		
			     - CU                   |			|			 |
			     - ALU 		- Input Dev.	      - OS			- CAD/CAD Soft
			     - IM		- Output Dev.	      - Device Drivers		- Antivirus
								      - Lang.Processor		- Ms-Office
												- Media Players


		 				  CPU  
					_________________________
					|			|
				|----->	|	  CU		|---> sends the command signal to every connected peripherial
				|	|_______________________|
		   Input	|	|			|	 	 Output
		    [ ]		|   |-->|	  ALU		|---|     |--->   [ ]
		     |		|   |	|_______________________|   |	  |
		     |		|   |---|			|<--|	  |
		     |		|-------|	  IM		|	  |
		     |---------------->	|_______________________|---------|
					       ^          |	
					 ______|__________V______
					|			|
					|	  EM		|
					|_______________________|



		Memory: Storage Area

					Memory
					  |
				-------------------------
				|			|
			    Internal		     External
				|			|
			-----------------	  -------------------------
			|		|	  |	|	|	  |
		  Tmp/volatile/   Per/Non-Vola.  HDD   CD     DVD    PD,Memory cards
		  short-term   	  long-term	
			|		|
		       RAM             ROM	
                     - SRAM             |
		     - DRAM    ---------------------------
			       | 	|	|	 |
			    Simple    PROM    EPROM  EEPROM	
			     ROM


		data flows in terms of electrical signals thw the system. we know that electrical
		energy can be stored but we unable to store the electrical signals. so it can be stored 		
		in magnetic form.

				A

			    10011010	(assumed)

			__/\__/\/\_/\_
		_________________________________________________________
		| @--@@-@-						|
	Write	|							|
  ------------  |							|	
	Read	|							|
		|							|
		|							|
		|_______________________________________________________|

			__/\__/\/\_/\_
	
			 10011010	
			
			     A
	
	Memory Units: 
	
		BInary digiTS ---> bits
		0 or 1 --> bit

		4 bits --> 1 nibble
		8 bits --> 1 byte
		1024 bytes --> 1 KB
		1024 KB ---> 1 MB
		1024 MB --> 1 GB	
		1024 GB --> 1 TB


	ASCII: ASCII, abbreviated from American Standard Code for Information Interchange, is a character encoding standard for electronic communication. 			ASCII codes represent text in computers, telecommunications equipment, and other devices

		A ==> 0010101...  ==> 65

		A-Z ==> 65 to 90

		a-z ==> 97 to 122


	In TC, Addressible memory is 64k (65535 bytes)

			[][][][][][][][][]
			[][][][][][][][][]
			[][][][][][][][][]
			[][][][][][][][][]
			[][][][][][][][][]
			[][][][][][][][][]


	
//=====================================================================================================


		Language: It is way of communication.	

		programming language: set of symbols used to communicate with computer using some rules.

		lang. Processor: convert human code into m/c code and vice versa

				- Assembler
				- Interpreter
				- Compiler

		Here in we are using Compiler in C programming



			Instructions            Prog_nm
                              |___________________|
                                         |
		                         |           Debug
		source code	     *.c/*.cpp <---------------------|
					 |			     ^	     
					 |			     |
				       compile --------------------->| compile-time error
  					 |			     |	(syntax Errors)
					 |			     |
		backup file		*.bak			     | 
					 |			     |	
			Linker --------->|-------------------------->| Linker errors
					 |			     |	
	object code file		*.obj			     |
					 |			     |
					 |			     ^	
	executable file 		*.exe			     |
					 |			     |
					Run ------------------------>| Runtime errors
					 |
				       Output


				Programming Language
					   |
				------------------------
				|			|
			       LLL		       HLL
			  Assembly 		   Fortran, java C++, VB, C# ...
			up,uc....


		As C has fetures of both HLL and LLL, It is known as middle level language.



		     SIMULA
		     COBOL								   |-- Sun Microsystem --> Java
	Assembly --> Fortran ----> ALGOL60 --> CPL --> BCPL-----> B -----> C ----> C++ ====|-- Microsoft corpo.--> .Net
		     RPG	    (1960)   (1963)    (1967)    (1970)   (1972) (1983-84) |-- .......
		     BASIC								   |
		     Pascal
		     ....


	How to learn C Programming:
	==========================

	
	English  --->  character set  ---> words  ---> sen --> para --> chapter ---> book


						constant	
	C programming --> Character set -->	keyword   ----> Instruction ---> Program ---> Module ---> Software
						variable


		Character set: We are using the lowercase US English for the coding so character set is same as English
				which includes....

					Alphabets:
							- Uppercase A to Z
							- Lowercase a to z

					Digits: 	0 to 9


					Special Symbols: !@#$%^&*(_)+ ....
				


		Constant, variable and keyword: 

		Constant is element in the program which has fix value, and which can not be changed.

								C Constants
								    |
							---------------------------
							|			  |
						    Numeric 		     Non-Numeric
							|			|
						-----------------	-----------------
						|		|	|		|	
					   Integer     floating-point  character     String
					-6,4,56    -5.3,7.0,78.6755    'a', '$'     "A", "Hello"		
									'H' '4'	     "a123"


		variable: suppose, the formula of simple interst

				si = (p*r*n) / 100 ;

			variables ---> p,r,n,si
			constant  ---> 100

		Variable is element in the program which may change during the program execution.

		Keyword: These are reserved words, whose meaning is already known to compiler. 
			 There are 32 keywords in C. and therse are

		auto		double		int		struct
		break		else		long		switch
		case		enum		register	typedef
		char		extern		return		union
		continue	for		signed		void
		do		if		static		while
		default		goto		sizeof		volatile
		const		float		short		unsigned


//---------------------------------------------------------------------------------------------------------------------------------------------

	// 	Instruction : It is command issued to perform the specific task.	

				There are 4 different types of instructions.

					1. Input-Output Instruction
					2. Type Decl. Instruction
					3. Arithmetic instruction
					4. Control Instruction


		Concept of Editor and IDE: notepad, Turboc++ IDE, codeblocks, Online Compiler.



	Before starting to actual instructions, just see how and where to write a code.

 	In CodeBlocks							In TurboC
	=============							==========

	1. open codeblocks						1. open TC ---> file --> new
	2. write a code							2. Write a code

	int main()							void main()
	{								{
		printf("welcome");						clrscr();
		return 0;							printf("\n Welcome to c programming");
	}									getch();
									}
							
	3. built							3. Compile (F9)
	4. run to see output						4. Run ( Ctrl+F9 )



	
		1. Input-Output Instruction:

		Let's start with Output Instruction:

			The built-in function printf() used to display the data on screen.

				Syntax:
					printf("<Format_String>");

					 e.g.
						printf("Good Morning To All");


	    // Welcome program
    
    /*
        Batch: Placement Batch
        Date: 03-07-2021
        Instructor: Yogesh J Patil
    */

int main() // Starting point of the program
{
	printf("welcome to c programming");
	return 0;
}


 Using comments: In the program, you can write the help or notes rather than instructions, which not a part of instructions called comments.
		 there are 2 types of comments.

		1. single line comment	// ... 

		2. Multiline Comment /* .....*/



        // WAP to display the personal details

int main()
{
    printf("Personal Information");
    printf("Name: Ajay Amit Pol");
    printf("Age: 21 Gender: M");
    printf("Address: shiv plaza, Near AB Chowk,G6, Pune-2");
    printf("Marks- SSC: 90.45% HSC: 98.43");
    printf("Amit is my good friend");
    printf("\n What about you?");

    return 0;
}


 This will displays the unformatted output, To display the output in well formatted manner
 escape sequence characters are used.


        List Of Escape Sequence Characters
        ===================================

        \n - Newline
        \t - horz. Tab
        \a - bell
        \b - backspace
        \v - vertical tab
        \r - carriage return
        \f - form feed
        \' - to print '
        \" - to print "
        \\ - to print \
        \? - to print ?
        %% - to print %

    // Above program with Escape Sequence Characters
*/

int main()
{
    printf("\n ****** Personal Information ******\a\a\a");
    printf("\n Name: Ajay Amit Pol");
    printf("\n Age: 21 \t Gender: \'M\' ");
    printf("\n Address: \"shiv plaza\", Near AB Chowk,G\\6, Pune-2");
    printf("\n Marks- SSC: 90.45%% \t HSC: 98.43%%");
    printf("\n Amitraj is my good friend \r ABHI");
    printf("\n What about you\?");
    printf("\n ABC\bDEFGH\b\bIJKLMNOP");
    return 0;
}
//===================================================================================================================================================

	// 2. Type Decl. Instruction: The aim this instruction is to allocate the memory.

			
		syntax:
			<data_type> <var_nm>;
	
		Now we have to see Data Types: 

			what is data type?  ==> It is programming tool, which is responsible for memory allocation.
		
			or In another words,

		Data, which is input to computer, is divided into different groups according to the memory needs, where
		individual group is called type and collectively it is known as data types.

					
							C Data Types
							      |
					--------------------------------------------------
					|			|			 |
				    Built-in		     Derived		    Userdefined		
					|			|			|
			  -------------------	 	------------------	       ---------------------
			  |		    |        	|         |       |	       |	|	   | 
			Numeric         Non-Numeric   Array    pointer  function    structure  Union     Enum
			  |                  |
		----------------        ------------------
		|		|	|		|
	    Integers	  Fractional   character     string
	     (int)	      |		  |
		          --------      (char)    
                          |       |
			(float) (double)


		There are 4 different basic/Built-in types in C 

		Data type       Memory 			format specifier

		char		1 byte			    %c
		
		int 		2 bytes(TC)		    %d
				4 bytes(GCC)

		float		4 bytes			    %f

		double		8 bytes			    %lf



		Now We have to see <var_nm> means --> It is an identifier of memory location.


		memory  ---> storage area.

			Addressible memory --> maximum allowable storage for one program.

			 [ 64K --> 65535 bytes] 

			[][][][][][][][][][][]
			[][][][][][][][][][][]
			[][][][][][][][][][][]
			[][][][][][][][][][][]	
			[][][][][][][][][][][]
			[][][][][][][][][][][]
			[][][][][][][][][][][]
			[][][][][][][][][][][]	
			[][][][][][][][][][][]
			[][][][][][][][][][][]
			

		We know that, variable name is identifier of memory location. there are some rules to select the identifier
		and these are

		- Uppercase and Lowercase letters are different.
		- No any special symbol is allowed rather than _ (Not even blank space)
		- It may be alphanumeric but must starts with alphabet or _
		- Keyword can not be used as a identifier.


	There are 4 differnt type of type decl.

	1. simple decl:

		int x;		char ch;	float ft;

		x		ch		ft
		[    ]           [ ]             [    ]
	      2/4 bytes		1 byte		4 bytes


	2. Multiple Decl:

		int x,y,z;		double d1,d2;

		x	y	z		d1		d2
		[ ]	[ ]	[ ]		[       ]	[ 	]
		  2/4 bytes each		    8 bytes each

	
	3. decl. with init:

		int x=10;		char c1='A';

		x	   		c1		
		[ 10 ]                     [ 'A' ]	 
	
	
	4. Multi. decl. with init:

		int x=10, y=20;		char c1='A', c2='D';

		x	   y			c1		c2
		[ 10 ]     [ 20 ]                [ 'A' ]	 [ 'D' ]	

//-----------------------------------------------------------

	// WAP to init and display the values

int main()
{
    int x=340;
    char ch='A';
    float ft=4.5;
    double db=54.754545;

    printf("\n value of x is: %d",x);
    printf("\n ch=%c \t ft=%0.3f \n Val of db is %lf",ch,ft,db);

    return 0;
}


//--------------------------------------------------------------------------------------------


	Using input Instruction: The built-in function scanf() is used to input the data from the keyboard.
				 this is from stdio.h


				syntax: 
					scanf("<format_specifier>",&<var_nm>);


					int x;
					scanf("%d",&x);

					int x,y,z;
					scanf("%d %d %d",&x,&y,&z);

					char ch;
					int a;
					double db;
					scanf("%c %d %lf",&ch,&a,&db);




// WAP to input and display the values.

int main()
{
    int x;
    char ch;
    float ft;
    double db;

    printf("\n Enter one character,integer and two fractional values: ");
    scanf("%c %d %f %lf",&ch,&x,&ft,&db);

    printf("\n value of x is: %d",x);
    printf("\n ch=%c \t ft=%0.3f \n Val of db is %lf",ch,ft,db);

    return 0;
}

//---------------------------------------------------------------------------

    // When i write the above program as (character is entered at last or in between)

        // Using fflush(stdin) to clear Keyboard buffer
*/

#include<stdio.h>
int main()
{
    int x;
    char ch;
    float ft;
    double db;

    printf("\n Enter one integer and two fractional values: ");
    scanf("%d %f %lf",&x,&ft,&db);

    printf("\n Enter the character: ");
    fflush(stdin); // Try to run with and without this instruction
    scanf("%c",&ch);

    printf("\n value of x is: %d",x);
    printf("\n ch=%c \t ft=%0.2f \n Val of db is %lf",ch,ft,db);

    return 0;
}


//------------------------------------------------------------------------------------

	 // Arithmatic Instruction: This instruction provides the different operators, which are used to process the data.

				- Assignment Operators [=]:   						
				- Unary Operators [ - ++ -- (type) sizeof ]:
				- Arithmatic Operators [ + - * / % ]:
				- Relational Operators [ < <= > >= ]:
				- Equality Operators [==, != ]
				- Logical Operators [ && || !]:
				- Conditional Operators [ ? : ]:
				- Bitwise Operators [ & | ^ >> << ]:
				- Special Operators [ , ; . -> &(ampersand) * ]:


	- Assignment Operators [=]:   It will assigns the constant value, value of variable or answer of expression at its right to
				      variable at left.

					e.g.
						x=10;		y=x;		z=x+y;	


//--------------------------------------------------------------------------------

    // Write as program to interchange the values of 2 variables

void main()
{
    int x,y,tmp;

    printf("\n Enter any 2 nos: ");
    scanf("%d %d",&x,&y);

    printf("\n Before Interchange Values of x: %d and y: %d",x,y);
    tmp=x;
    x=y;
    y=tmp;
    printf("\n After Interchange Values of x: %d and y: %d",x,y);

    return 0;
}

//--------------------------------------------------------------------------------

    // Write as program to interchange the values of 2 variables (without using tmp)

void main()
{
    int x,y;

    printf("\n Enter any 2 nos: ");
    scanf("%d %d",&x,&y); // 10 12

    printf("\n Before Interchange Values of x: %d and y: %d",x,y);

    x=x+y; // 22
    y=x-y; // 10
    x=x-y; // 12

    printf("\n After Interchange Values of x: %d and y: %d",x,y);

    return 0;
}

//---------------------------------------------------------------------------------------------------------------+

	- Unary Operators [ - ++ -- (type) sizeof ]:

		-(Unary Minus) : It will gives the opposite value.

			x=34;

			y=-x;		The - operator is operated on x first, and then the -34 will be assigned to y.


	- Increament(++) decreament(--) Operators: 

				The increament operator will increase the value of variable by 1. and the decreament operator
		decreases the value of operand by 1.

					These operators are divided into two subtypes


						    inc/dec opeartors
							   |
						  ---------------------
						  |		      |	
						 Pre		    Post
					      (++x,--x)		  (x++, x--)


					++x   <--->   x=x+1	<--->	x++

					--x   <--->   x=x-1     <---> 	x--


		
		Means pre or post increament operator increases the value of operand by 1 where as pre or post decreament operator
		decreases the value of operand by 1.

			They behaves differently when they are used in the expression.

		suppose,
				x=4	and     y=9

				and we have to calc. 

					z = ++x + y--;	

				1. operate all pre operators. (x increased by 1 i.e. 5)
				2. with current values calc. the basic expr. (z=x+y)  ===> (z=5+9) ==> z=14.
				3. operate all post operators (y decreased by 1)

    // Using -, ++ -- operators

int main()
{
	int x=4,y=9,z;

	z=-x;
	printf("\n x=%d \t y=%d \t z=%d",x,y,z); // 4 9 -4

	x++;
	--y;
	printf("\n x=%d \t y=%d \t z=%d",x,y,z); // 5 8 -4

	z = ++x + y-- ;
	printf("\n x=%d \t y=%d \t z=%d",x,y,z); // 6  7  14

	return 0;
}

//------------------------------------------------------------------------------------------------------------

		- Using (type) and sizeof operators:

	(type) refers to type casting. i.e. changing the type of variable only at the time of calculation.

		suppose, x=13 and y=5, Now we have to calculate the z=x/y.

		Note carefully that, In programming, ans of any expression is converted into type which is highest memory holder
		present in that expression.


			z=x/y  ==> z=(int/int), which gives the int type of value.

						In maths terms, it will be 2.6 but only 2 will be considered.

	 	To get the perfect value, we need any one operand in fractional. So to convert that operand in fractional, just use
		the casting as,

			z=(float)x/y;	 or	z=x/(float)y;  	 or	z=(float)x/(float)y;


    // casting example

int main()
{
    int x=13,y=5;
    float z;

    z=x/y;
    printf("\n z is %f",z);

    // to get the correct ans, we should convert any one or both N/D to float
    // only at the time of calculation and which is done by type casting as shown

    z=(float)x/y;
    printf("\n z is %f",z);

    z=x/(float)y;
    printf("\n z is %f",z);

    z=(float)x/(float)y;
    printf("\n z is %f",z);

    return 0;
}


	// sizeof operator: It will gives the memory need in terms of bytes using keyword of that data type. or memory allocated for that
	//  		    for that variable using variable name.

int main()
{
    int x=1467;
    float y;

    printf("\n For int type: %d",sizeof(int));
    printf("\n For int variable x: %d",sizeof(x));

    printf("\n For float type: %d",sizeof(float));
    printf("\n For float variable x: %d",sizeof(y));

    printf("\n For char type: %d",sizeof(char));
    printf("\n For double type: %d",sizeof(double));

    return 0;
}


//---------------------------------------------------------------------------------------------------------------------------------

	- Arithmatic Operators [ + - * / % ]:
	
		// WAP to calc the simple interst

		formula: 	si = ( p * r * n ) / 100 ;
	
*/


int main()
{
    int p,n;
    float si,r;

    printf("\n Enter the values of p r and n: ");
    scanf("%d %f %d",&p,&r,&n);

    si=(p*r*n)/100;

    printf("\n Si is: %f",si);
    return 0;
}




//------------------------------------------------------------------------------

    // WAP to convert the temp from F to Deg.

    formula: (0°C × 9/5) + 32 = 32°F

            (°F − 32) / 1.8 = °C
*/

int main()
{
    float cesius,fehrenhite;

    printf("Enter the temp in fehrenhite: ");
    scanf("%f",&fehrenhite);

    cesius = (fehrenhite -32)/1.8 ;
    printf("temp in cesius is: %f",cesius);

    return 0;
}





//-----------------------------------------------------------------------------------------


		// Using / and % Operators

		
		// operator gives the Quotient and the % operator gives remainder 

		suppose the expression	

				z = 13 / 5 ;

					
				   2 <-------- Quotient (13/5)
				________
			      5	)  13
				 - 10
				________
				   3  <----- remainder (13%5)


			   3  <----- remainder 


	
		13/5 ==> 2		13%5 ==> 3

		234/10 ==> 23		234%10 ==> 4

		2392/10 ==> 239		2392%10 ==> 2

		4/12  ---> 0		4%12 ===> 4


	// Enter any 3 digit number and display the addition of all 3 digits.

            e.g. 148 -> 8+4+1 ==> 13

		no	rem    sum
				0
		148	8	8
		14	4	12
		1	1	13
		0

	
int main()
{
    int no,rem,sum=0;

    printf("\n Enter any 3 digit no: ");
    scanf("%d",&no);

    rem=no%10;
    sum=sum+rem;
    no=no/10;

    rem=no%10;
    sum=sum+rem;
    no=no/10;

    rem=no%10;
    sum=sum+rem;
    no=no/10;

    printf("\n Addition of all digits: %d",sum);
    return 0;
}

//------------------------------------------------------------------------------------------------------------------------------

	- Relational Operators [ < <= > >= ]:  The relational operators are used to finout the relation between 
					       two operands. It will from the condition, which is helpful in the
					       different conditional control statments.

					       The ans of the condition is int value 1 when the condition is true.
 					       and the ans is int value 0 when the condition is false.




	- Equality Operators [==, != ] : It is used to compare the two operands. and again it will forms the condition. when the condition 
					 is true it represented using int value 1 otherwise 0



		suppose,

			x=4	and     y=12  then,

			(x>y) --> gives 0

			(y>x) --> gives 1

			(x%2==0) ---> gives 1

			(y%5==0) --> gives 0

			(x!=y) ----> gives 

//------------------------------------------------------------------------------------------------

	- Logical operators: [ && || ! ] : the logical operators are used to join two or more conditions.


		when the conditions are joined using..

			&&  --> will gives the 1 only when both/all conditions are true otherwise 0.

			|| --> will gives 0 only when both/all conditions are false otherwise it will gives 1

			!(true)--> false		!(false) --> true

			!(1) --> 0			!(0) ---> 1


        // using logical operators

int main()
{
    int x=4,y=12;
    int z;

    printf("\n (x>y)&&(y<100) is %d",(x>y)&&(y<100)); //0
    printf("\n (x!=y)&&(y<100) is %d",(x!=y)&&(y<100)); //1

    printf("\n\n (x>y)||(y<100) is %d",(x>y)||(y<100)); //1
    printf("\n (x>y)||(y<10) is %d",(x>y)||(y<10)); //0

    printf("\n\n !(x%%2==0) is %d",!(x%2==0));
    printf("\n !(y%%5==0) is %d",!(y%5==0));

    return 0;
}

//-----------------------------------------------------------------------------------------------------------------------

// - Conditional operator: [? : ] - This is also known as if-then-else or ternary operator.

					    This is the only operator which able to take the decision.


		syntax:
				<cond>  ?  <true_part>  :  <false_part>  ;

			Only <true_part> will be executed when <condi> is True otherwise <false_part> will be executed.



	// WAP to find max bet 2 nos using conditional operator

int main()
{
    int n1,n2;

    printf("\n Enter any two nos: ");
    scanf("%d %d",&n1,&n2);

    (n1>n2) ? printf("\n n1: %d is max",n1) : printf("\n n2: %d is max",n2) ;

    return 0;
}

    // In another way

int main()
{
    int n1,n2,mx;

    printf("\n Enter any two nos: ");
    scanf("%d %d",&n1,&n2);

    mx = (n1>n2) ? n1 : n2 ;

    printf("\n Max Number: %d",mx);

    return 0;
}

    // Nesting of Conditional operator: using the conditional operator with another conditional operator.

*/
    // WAP to find max from any 3 nos

int main()
{
    int n1,n2,n3,mx;

    printf("\n enter any three nos: ");
    scanf("%d %d %d",&n1,&n2,&n3);

    mx = (n1>n2) ?  (n1>n3)?n1:n3    :   (n2>n3)?n2:n3   ;

    printf("\n Max no: %d",mx);
    return 0;
}

//----------------------------------------------------------------------------------------------------------

	// - Special Operators [ , ; . -> &(ampersand) * ]:


			, - used as seperator  e.g.  int x,y,z;

			; - it is used to indicate termination.

			. and -> - these are member access operators

			* - pointer declerator

			& - Ampersand, used to gain the address of variable.

		


//-----------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------

			// Control Instruction: Used to control or manage the execution flow of your program.

				C provides different control statments for that and these are..



							Control statments
							      |
						------------------------------
						|			      |
					Conditional CS			UnConditional CS
						|				|
				-------------------------------		----------------------------------
				|		|	     |		|	   |		|	  |
			   Decision	     Loop	   Case	       goto      break      continue     return 
			    |		      |		    |	
			- if()		    - for()	  switch()
			- if() else	    - while()
			- Nesting	    - do while()
			- Ladder
 

	conditional control statments: needs the condition for working.

	unconditional control statments: Does not need any condition to work



//----------------------------------------------------------------------------------------------------------------------------


	//  Decision Conditional Control statment: 

	
			// Using if(): used to decide, execute the block of code or not. That block is mentioned in the program as

			syntax:
				if(<condi>)
				{
					-------------;
					-------------;
					block of code;
					-------------;
					-------------;
				}
				
		- Block of code will be executed only when the condition is true otherwise it will be skipped
	

// Enter the number and display the entered number is even or odd

int main()
{
	int no;

	printf("\n Emter the no: ");
	scanf("%d",&no);

	if(no%2==0)
	{
		printf("\n No: %d is Even",no);
	}

	if(no%2!=0)
	{
		printf("\n No: %d is Odd",no);
	}

	return 0;
}

//-----------------------------------------------------------------------------------

     // WAP to enter price of 3 items and calc the discount. (discount is 7% when amount exceeds 500)

int main()
{
    float p1,p2,p3,tot,dis=0.0;

    printf("\n Enter the price of 3 items: ");
    scanf("%f %f %f",&p1,&p2,&p3);

    tot=p1+p2+p3;
    if(tot>500)
    {
        dis=tot*0.07;
    }
    printf("\n Total Bill: %f",tot);
    printf("\n Discount: %f",dis);
    printf("\n Pay Rs: %0.2f",(tot-dis));

    return 0;
}


//-----------------------------------------------------------------------------------


	// Using if() else: It is used when you want to execute any one code block from two different blocks
	//		    according to condition.


		syntax:
			if(<condi>)
			{
				-----------------;
				---------------;
				----------------;
			}
			else 
			{
				-----------------;
				---------------;
				----------------;
			}

		when <condi> is  TRUE --> will execute the if() block only
				 FALSE -> will execute the else block only


    // Using if() else


// Enter the number and display the entered number is even or odd (using if() esle)

int main()
{
	int no;

	printf("\n Emter the no: ");
	scanf("%d",&no);

	if(no%2==0)
	{
		printf("\n No: %d is Even",no);
	}
	else
	{
		printf("\n No: %d is Odd",no);
	}

	return 0;
}

//-----------------------------------------------------------------------------------

   // WAP to enter price of 3 items and calc the discount. (discount is 7% when amount exceeds 500 otherwise 3%)
*/
int main()
{
    float p1,p2,p3,tot,dis=0.0;

    printf("\n Enter the price of 3 items: ");
    scanf("%f %f %f",&p1,&p2,&p3);

    tot=p1+p2+p3;
    if(tot>500)
    {
        printf("Discount is 7%%");
        dis=tot*0.07;
    }
    else
    {
        printf("Discount is 3%%");
        dis=tot*0.03;
    }
    printf("\n Total Bill: %f",tot);
    printf("\n Discount: %f",dis);
    printf("\n Pay Rs: %0.2f",(tot-dis));

    return 0;
}


	Notes: 
		- when if() or else or both contains only one statement the {} are optional. 
		  coz both considers 1 stat. within it bydefault.

		- Only if() can be used but only else can not be used.

		- else dont have any condition in any case.

		- In if() else, else must but just after cmp of if(). No any statement allowed in between.
	
		- if() and else, both does not ends with ;. If you use ; at last then it will acts as a null statement.


// ----------------------------------------------------------------------------------------------------------------------------------------

	// 	Using Nesting of if() else:

			Nesting refers to using one contril statment in to same or another control statement


	some combinations:


		if()				if()				if()			if()
		{				{				{			{
			if()				if()			}				if()
			{				{			else				{
			}				}			{				}
		}					else				if()		}
							{				{		else
							}				}		{
						}				}				if()
														{
														}
													}


		
		if()					if()
		{					{
			if()					if()	
			{					{
			}					}
		}						else
		else						{
		{						}
			if()				}
			{				else
			}				{
			else					if()
			{					{
			}					}
		}						else
								{
								}
							}


//--------------------------------------------------------------------------------------------------------------

	// Enter 3 nos and display the max from it.

int main()
{
	int n1,n2,n3;

	printf("\n Enter any 3 nos: ");
	scanf("%d %d %d",&n1,&n2,&n3);

	if(n1>n2)
	{
		if(n1>n3)
		{
			printf("\n N1: %d is max",n1);
		}
		else
		{
			printf("\n N3: %d is max",n3);
		}
	}
	else
	{
		if(n2>n3)
		{
			printf("\n N2: %d is max",n2);
		}
		else
		{
			printf("\n N3: %d is Max",n3);
		}
	}

	return 0;
}



//---------------------------------------------------------------------------------------------------

        // Enter any no and find No is div by 3 or No is div by 5 or No is div by both or not by both


int main()
{
    int no;

    printf("\nEnter the no: ");
    scanf("%d",&no);

    if(no%3==0)
    {
        if(no%5==0)
        {
            printf("\n No is div by Both 3 and 5");
        }
        else
        {
            printf("\n No is div by 3 only");
        }
    }
    else
    {
        if(no%5==0)
        {
            printf("\n No is div by 5 only");
        }
        else
        {
            printf("\n No is not div by both 3 and 5");
        }
    }
    return 0;
}


//------------------------------------------------------------------------------------------
    // Enter any character and find it is ucase, lcase, digit or special symbol
    
         A to Z --> 65 to 90
         a to z --> 97 to 122
         0 to 9 --> 48 to 57

*/
int main()
{
    char ch;

    printf("\n Enter any character: ");
    scanf("%c",&ch);

    if(ch>='A' && ch<='Z')  //  if(ch>=65 && ch<=90)
    {
        printf("\n Entered character is: UCASE");
    }
    else
    {
        if(ch>='a' && ch<='z')
        {
            printf("\n Entered character is: LCASE");
        }
        else
        {
            if(ch>='0' && ch<='9')
            {
                printf("\n Entered character is: DIGIT");
            }
            else
            {
                printf("\n Entered character is: SPECIAL SYMBOL");
            }
        }
    }
    return 0;
}


//---------------------------------------------------------------------------------------------------------------

	// There are another 3 different ways can be used to take the character as a input

		- using getch(), getche() and getchar()


int main()
{
    char ch;

    printf("\n Enter any character: ");
    ch=getch(); // will not echo(display) entered character at the time of input and not wait for enter key
    printf("\n Entered character is: %c",ch);

    printf("\n Enter any character: ");
    ch=getche(); // will echos(displays) entered character at the time of input and not wait for enter key
    printf("\n Entered character is: %c",ch);

    printf("\n Enter any character: ");
    ch=getchar(); // will echo(display) entered character at the time of input and wait for enter key
    printf("\n Entered character is: %c",ch);
    return 0;
}


//---------------------------------------------------------------------------------------------------------------------


	// Using if() else Ladder

	syntax:

		if(<>)
		{
			---------;
			---------;
		}
		else if(<>)
		{
			---------;
			---------;
		}
		else if(<>)
		{
			---------;
			---------;
		}
		else if(<>)
		{
			---------;
			---------;
		}
		else
		{
			---------;
			---------;
		}



	// Enter the co-ordinates of point in 2D system, and display the exact location of that point.


			       y axis
                                ^
                       II QD    |   I QD
                                |
                        -+      |   ++
                                |
                  <-------------|------------> x axis
                                |(0,0)
                                |
                        --      |   +-
                                |
                    III QD      V     IV QD


		
                There are 7 different possibilities.

int main()
{
    int x,y;

    printf("\n Enter the x and y cord: ");
    scanf("%d %d",&x,&y);

    if(x>0&&y>0)
    {
        printf("\n Point present in I st qd");
    }
    else if(x<0&&y>0)
    {
        printf("\n point present in II nd qd");
    }
    else if(x<0&&y<0)
    {
        printf("\n Point is present in 3 rd qd");
    }
    else if(x>0&&y<0)
    {
        printf("\n Point is present in 4 th qd");
    }
    else if(x!=0&&y==0)
    {
        printf("\n Point is present on x axis");
    }
    else if(x==0&&y!=0)
    {
        printf("\n Point is present on y axis");
    }
    else 
    {
        printf("\n Point present at org");
    }
    return 0;
}

//------------------------------------------------------------------------------------------

    // Enter any character and display it is ucase, lcase, digit or special symbol (use ladder)

int main()
{
    char ch;

    printf("\n Enter the character: ");
    ch=getchar();

    if(ch>=65&&ch<=90)
    {
        printf("Entered character: UCASE");
    }
    else if(ch>=97&&ch<=122)
    {
        printf("Entered character: LCASE");
    }
    else if(ch>=48&&ch<=57)
    {
        printf("Entered character: DIGIT");
    }
    else
    {
        printf("Entered character: Special Symbol");
    }
    return 0;
}

//----------------------------------------------------------------------------------

   // WAP to the position of employee in the company using the salary.


        upto 1K --> Worker

        1K - 3K --> Jr

        3K - 5K --> Sr

        5K - 7K --> Dr

        7K Onwrd --> CEO

int main()
{
    int sal;

    printf("\n Enter the salary: ");
    scanf("%d",&sal);

    if(sal<=1000)
    {
        printf("Employee Post: Worker");
    }
    else if(sal<=3000)
    {
        printf("Employee Post: Jr");
    }
    else if(sal<=5000)
    {
        printf("Employee Post: Sr");
    }
    else if(sal<7000)
    {
        printf("Employee Post: Dr");
    }
    else
    {
        printf("Employee Post: CEO");
    }
}

//-----------------------------------------------------------------------------------------------------------------------------------------------

		// Using the Loops in C: Loops are used to avoid the conti. repitition of code in the program.
					 There are three different loops in C.

				1. For() loop		2. While() loop		3. do..While() loop



	1. For() loop:

		syntax:	
				
			for( <init> ; <condi> ; <inc/dec/stat/expr> )					
			{									
				--------------;							   
				--------------;						
				--------------;							 
				--------------;							
				--------------;							     
			}


	// WAP to display the "Hello"

int main()
{
	printf("\n Hello");
	return 0;
}

//------------------------------------------------------------------------------------------------------------------------------------------

	// WAP to display the "Hello" 5 times

int main()
{
	printf("\n Hello");
	printf("\n Hello");
	printf("\n Hello");
	printf("\n Hello");
	printf("\n Hello");

	return 0;
}
//--------------------------------------------------------------------------------
    // Using the for() loop:
    //-----------------------


	// WAP to display the "Hello" 5 times

int main()
{
	int t;

    for(t=50;t<55;t=t+1)
    {
        printf("\n Hello");
    }
	printf("\n End of loop");
	return 0;
}

    // OR

int main()
{
	int t;

    for(t=50;t<75;t=t+5)
    {
        printf("\n Hello");
    }
	printf("\n End of loop");
	return 0;
}

    // OR

int main()
{
	int i;

    for(i=0;i<5;i++)
    {
        printf("\n Hello");
    }
	printf("\n End of loop");
	return 0;
}


    // OR

int main()
{
	int i;

    for(i=5;i>0;i--)
    {
        printf("\n Hello");
    }
	printf("\n End of loop");
	return 0;
}

//------------------------------------------------------------------------------------

    // WAP to display 1-10 nos

int main()
{
    int no;

    printf("\n List Of Nos: ");
    for(no=1;no<=10;no++)
    {
        printf("\n %d",no);
    }
    printf("\n End of program");
}



//------------------------------------------------------------------------------------

    // WAP to display all even nos from 1-25 nos


int main()
{
    int no;

    printf("\n List Of Even Nos From 1-25 \n");
    for(no=1;no<=25;no++)
    {
        if(no%2==0)
        {
            printf("\n %d",no);
        }
    }
    printf("\n End of program");
}

    // Alternative Way

int main()
{
    int no;

    printf("\n List Of Even Nos From 1-25 \n");
    for(no=2;no<=25;no=no+2)
    {
        printf("\n %d",no);
    }
    printf("\n End of program");
}

//------------------------------------------------------------------------------------

    // WAP to display all Multiples of 3 and 5 nos from 1-100 no


int main()
{
    int no;

    printf("\n List Of Multi. of 3 and 5 From 1-100:");
    for(no=1;no<=100;no++)
    {
        if(no%3==0&&no%5==0)
        {
            printf("%6d",no);
        }
    }
    printf("\n End of program");
}

//-----------------------------------------------------------------------------------------

    // WAP to add 1-10 nos
        (1+2+3+4+..+10)

int main()
{
    int i,sum=0;

    for(i=1;i<=10;i++)
    {
        sum=sum+i;
    }
    printf("\n Addition of 1-10 is %d",sum);
    return 0;
}


//--------------------------------------------------------------------------

    //  Enter any 5 nos thw keyboard and display the addition. (use loop)


    no      sum
            0
    10      10
    4       14
    7       21
    15      36
    100     136

int main()
{
    int i,no,sum;   
    sum=0;
    for(i=0;i<5;i++)
    {
        printf("\n Enter No: ");
        scanf("%d",&no);
        sum=sum+no;
    }
    printf("\n Addition is: %d",sum);
}

//-----------------------------------------------------------------------------------------------------



    // Enter the no and just add all digits in it.

            e.g. 148 -> 8+4+1 ==> 13

		no	 rem    sum
                    0
		148	   8	8
		14	   4	12
		1	   1	13
		0


int main()
{
    int no,rem,sum;

    printf("\n Enter any 3 digit no: ");
    scanf("%d",&no);

    for( sum=0 ;no!=0; no=no/10 )
    {
        rem=no%10;
        sum=sum+rem;
    }

    printf("\n Addition of all digits: %d",sum);
    return 0;
}

//----------------------------------------------------------------------------

    // WAP to Reverse the no entered thw keyboard.
     e.g.
        395 --> 593
                395 is formed as       no     rem     rev
                                                        0
        5 * 10^0 =   5                  395     5       5
        9 * 10^1 =  90                  39      9       59
        3 * 10^2 = 300                  3       3       593
                ---------               0
                   395


int main()
{
    int no,rem,rev=0;

    printf("\n enter any no: ");
    scanf("%d",&no);

    for( ; no!=0 ; )
    {
        rem=no%10;
        rev=(rev*10)+rem;
        no=no/10;
    }
    printf("\n Reverse no: %d",rev);
    return 0;
}

//--------------------------------------------------------------------------------------

    // Enter any no and count digits from it
        e.g.
            no=1385     Digit Count: 4

int main()
{
    int no,cnt;

    printf("\n Enter No: ");
    scanf("%d",&no);

    for(cnt=0;no!=0;no=no/10)
    {
        cnt++;
    }
    printf("\n Digit Count is: %d",cnt);
    return 0;
}

//------------------------------------------------------------------------------------------

    // Enter any number and count the even digits in that number
        e.g.
            no=34562,       Even Digit Count: 3

int main()
{
    int no,cnt,rem;

    printf("\n Enter No: ");
    scanf("%d",&no);

    for(cnt=0;no!=0;no=no/10)
    {
        rem=no%10;
        if(rem%2==0)
        {
            cnt++;
        }
    }
    printf("\n Digit Count is: %d",cnt);
    return 0;
}

//-----------------------------------------------------------------------

    // WAP To find max digit in a number

        3856 ---> ans: 8

int main()
{
    int no,max,rem;

    printf("\n Enter the no: ");
    scanf("%d",&no);

    for( max=0 ; no>0 ; no=no/10 )
    {
        rem=no%10;
        if(rem>max)
        {
            max=rem;
        }
    }
    printf("\n Max Digit is: %d",max);
    return 0;
}

//----------------------------------------------------------------------------------

        // Enter any no and add the even and odd digits from it separately

            24385   ==>       5 + 3 = 8
                          8 + 4 + 2 = 14

int main()
{
    int no,rem,es,os;

    printf("\n Enter the no: ");
    scanf("%d",&no);

    for( es=0,os=0;no!=0;)
    {
        rem=no%10;
        if(rem%2==0)
        {
            es=es+rem;
        }
        else
        {
            os=os+rem;
        }
        no=no/10;
    }
    printf("\n Even Sum: %d \t Odd Sum: %d",es,os);
    return 0;
}


//---------------------------------------------------------------------------------------

    // Enter the number and add the alternate digit from it.

        no=28416   ==> 6+4+2 = 12
                         1+8 = 9

	no	s1	s2	rem   	flg	
					0
      28416	0	0	6
		6			1
      2841			1	
			1		0
      284			4
		10			1
      28			8
			9		0
      2		12			1
      0	

*/
int main()
{
    int no,s1,s2,flg=0,rem;

    printf("\n Enter the no: ");
    scanf("%d",&no);

    for(s1=0,s2=0 ; no!=0 ; no=no/10 )
    {
        rem=no%10;

        if(flg==0)
        {
            s1=s1+rem;
            flg=1;	
        }
        else
        {
            s2=s2+rem;
            flg=0;
        }
    }
    printf("\n s1: %d \t s2: %d",s1,s2);
    return 0;
}

///-------------------------------------------------------------------------------------------------------------------------

	//  Using while loop: 

		Again the aim is same i.e. used to avoid the code rep.

		syntax:
			while(<cond>)
			{
				----------------;
				----------------;
				----------------;
				----------------;	
			}

			- It will execute the body of loop, till the condition is true.

			- <init> block is absent in while() but you have init. the iterator before starting of loop.

			- <inc/dec> block is absent, but you have to add atleast one statement which will make the <cond> false
			  after some iterations. otherwise it will attend the infinite looping

			- It is same as the for() loop

				<init>;
				for(;<cond>;)
				{
					-------------;
					--------------;
					<inc/dec>;
				}

			- while not ends with ; if you write an end then it attends infinite looping
		

        // WAP to display the 1=1 nos

int main()
{
    int i;

    printf("\n List of 1-10 Nos: ");
    i=1;
    while(i<=10)
    {
        printf("\n %d",i);
        i++;
    }
    printf("\n end of program");
}

//----------------------------------------------------------------------------------------

        // WAP to display the mult. table of a no entered thw keyboard.

               no = 6

                6   6x1
                12  6x2
                18  6x3
                24  6x4
                30
                .
                .
                .
                60  6x10


int main()
{
    int no,m,i,ans;

    printf("\n Enter the no: ");
    scanf("%d",&no);

    i=0;  // iterator
    m=1;  // multi
    while(i<10)
    {
        ans=no*m;
        m++;
        printf("\n %d",ans);
        i++;
    }
    return 0;
}

//--------------------------------------------------------------------

int main()
{
    int no,i;

    printf("\n Enter any no: ");
    scanf("%d",&no);

    i=1;  // i used as iterator and multi.
    while(i<=10)
    {
        printf("\n %d",no*i);
        i++;
    }
    printf("\n end of program");
}

//----------------------------------------------------------------

    // Enter the number and find its factorial

        no=5        5! = 5 * 4 * 3 * 2 * 1      ==> 120


int main()
{
    int no,fact,i;

    printf("\n Enter the No: ");
    scanf("%d",&no);

    i=1;
    fact=1;
    while(i<=no)
    {
        fact=fact*i;
        i++;
    }
    printf("\n Factorial is: %d",fact);
    return 0;
}

//-----------------------------------------------------------------------------------

        // Another Way

int main()
{
    int no,fact,i;

    printf("\n Enter the No: ");
    scanf("%d",&no);

    i=1;
    fact=1;
    while(no>1)
    {
        fact=fact*no;
        no--;
    }
    printf("\n Factorial is: %d",fact);
    return 0;
}


//-----------------------------------------------------------------------------------

        // WAP to display the N^2 and N^3 where N is in range 1-10


            1       1       1
            2       4       8
            3       9       27
            .
            .
            .
            .
            
int main()
{
    int n;
    n=1;
    while(n<=10)
    {
        printf("\n %d \t %d \t %d",n,n*n,n*n*n);
	n++;
    }
    return 0;
}

//-------------------------------------------------------------------------------------------

// WAP to count the digits in a number, and add every, digit ^ Count

    suppose,    no=123
    
                    = (1^3) + (2^3) + (3^3)
                    = 1 + 8 +27
                    = 36



// WAP to find the missing digits from the number   3951  --> list of missing digits: 0 2 4 6 7 8
int main()
{
    int no,tmp,dg,flg,rem;

    printf("\n Enter the no: ");
    scanf("%d",&no);
    tmp=no;
    printf("\n Missing Digits: ");
    for(dg=0;dg<10;dg++)
    {
        no=tmp;
        flg=0;
        while(no!=0)
        {
            rem=no%10;
            no=no/10;
            if(rem==dg)
            {
                flg=1;
                break;
            }
        }
        if(flg==0)
            printf("%5d",dg);
    }
    return 0;
}

//------------------------------------------------------------------------------------------------

// WAP to find the rep of each digit 188311  --> - 1 rep 3 times
						 - 8 rep 2 times


int main()
{
    int no,tmp,dg,cnt,rem;

    printf("\n Enter the no: ");
    scanf("%d",&no);
    tmp=no;
    for(dg=0;dg<10;dg++)
    {
        no=tmp;
        cnt=0;
        while(no!=0)
        {
            rem=no%10;
            no=no/10;
            if(rem==dg)
            {
                cnt++;
            }
        }
        if(cnt>1)
            printf("\n %5d is present %5d times",dg,cnt);
    }
    return 0;
}
//------------------------------------------------------------------------------------

    // WAP to find the entered number is Armstrong or not

int main()
{
    int no,dc,tmp,rem,a,i,sum=0;

    printf("\n Enter the No: ");
    scanf("%d",&no);
    tmp=no;

    for(dc=0;no!=0;no=no/10,dc++);
    //printf("\n Digit Count: %d",dc);

    no=tmp;
    while(no!=0)
    {
        rem=no%10;
        no=no/10;

        a=1;
        i=0;
        while(i<dc)
        {
            a=a*rem;
            i++;
        }
        sum=sum+a;
        //printf("\n %d ^ %d is %d",rem,dc,a);
    }
    if(tmp==sum)
            printf("\n No is Armstrong");
        else
            printf("\n No is not Armstrong");
    return 0;
}


//------------------------------------------------------------------------------------

    // WAP to display the list of Armstrong numbers from range 10 - 10000


int main()
{
    int no,dc,tmp,rem,a,i,sum;

    printf("\n List of Armstrong No: ");

    no=10;
    while(no<=10000)
    {
        tmp=no;
        for(dc=0;no!=0;no=no/10,dc++);
        //printf("\n Digit Count: %d",dc);
        sum=0;
        no=tmp;
        while(no!=0)
        {
            rem=no%10;
            no=no/10;

            a=1;
            i=0;
            while(i<dc)
            {
                a=a*rem;
                i++;
            }
            sum=sum+a;
        }
        no=tmp;
        if(tmp==sum)
                printf("%5d",tmp);
        no++;
    }
    return 0;
}

//-------------------------------------------------------------------------------------------------------------------


    //  WAP to generate the max number using the digits of entered number

        4936  -->  9643

        583828


int main()
{
    int no,d,tmp,nn=0;

    printf("\n Enter the number: ");
    scanf("%d",&no);
    tmp=no;

    for(d=9;d>=0;d--)
    {
        no=tmp;
        while(no!=0)
        {
            if( (no%10) ==d )
            {
                nn=(nn*10)+(no%10);
            }
            no=no/10;
        }
    }
    printf("\n Max number using digits of %d is %d",tmp,nn);
    getch();
}

//-------------------------------------------------------------------------------------------------------------------------


		// Using do while() loop: Aim same as any loop, is to avoid the rep of code.

			do
			{
				---------------;
				---------------;
				---------------;
			}while(<cond>);

	- the difference between do while() and for(), while() is both for() and while() are top justified where as do while() is
	  bottom justified.



	// WAP to add N nos according to users choice



int main()
{
    int no,tot=0;

    do
    {
        printf("\n Enter any number: ");
        scanf("%d",&no);
        tot=tot+no;
        printf("\n press y to continue and any other key to stop...!!");
    }while((getch()=='y'));

    printf("\n Total is: %d",tot);
    return 0;
}

//----------------------------------------------------------------------------------------------------------

    // WAP to display the each character from character set with its ASCII value.

int main()
{
    int i;

    i=0;
    do
    {
        printf("\n %c --> %d",i,i);
        i++;
        if(i%20==0)
            getch();
    }while(i<256);
    return 0;
}

//-------------------------------------------------------------------------------------------------

        // WAP TO DISPLAY THE ENTERED NUMBER IS PRIME OR NOT.

int main()
{
    int no,d,flg;

    printf("\n Enter the number: ");
    scanf("%d",&no);

    d=2;
    flg=0;
    do
    {
        if(no%d==0)
        {
            flg=1;
            break;
        }
        d++;
    }while(d<=(no/2));
    if(flg==0)
    {
        printf("\n Number is Prime");
    }
    else
    {
        printf("\n Number is non-prime");
    }
    return 0;
}




//-------------------------------------------------------------------------------------------------

        // WAP TO DISPLAY THE the list of prime numbers from 10 to 100
*/
int main()
{
    int no,d,flg;

    no=10;
    printf("\n List Of Prime Numbers: ");
    while(no<=100)
    {
        d=2;
        flg=0;
        do
        {
            if(no%d==0)
            {
                flg=1;
                break;
            }
            d++;
        }while(d<=(no/2));

        if(flg==0)
            printf("%5d",no);

        no++;
    }
    return 0;
}

//-----------------------------------------------------------------------------------------------------------------------------

	// WAP to generate the two max numbers using the even and odd digits of number entered thw keyboard

		15478 ---> 84, 751


int main()
{
    int no,d,evmx=0,odmx=0,tmp,rem;

    printf("\n Enter the no: ");
    scanf("%d",&no);
    tmp=no;
    for(d=9;d>=0;d--)
    {
        no=tmp;
        do
        {
            rem=no%10;
            if(rem==d)
            {
                if(d%2==0)
                    evmx=(evmx*10)+rem;
                else
                    odmx=(odmx*10)+rem;
            }
            no=no/10;
        }while(no!=0);
    }
    printf("\n Max Using Even digits: %d",evmx);
    printf("\n Max Using Even digits: %d",odmx);

    return 0;
}


//-----------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------- Pattern Programs --------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------



        //  WAP to print the *

int main()
{
    printf("*");
}


//-------------------------------------------------------------------------------------------


        //  WAP to print the *****

int main()
{
    int i;
    for(i=0;i<5;i++)
    {
        printf("*");
    }
    return 0;
}

//-------------------------------------------------------------------------------------------


        //  WAP to print the

        *****
        *****
        *****
        *****
        *****


int main()
{
    int i,j;
    for(i=0;i<5;i++)        // Number of lines
    {
        for(j=0;j<5;j++)        // Number of * per line
        {
            printf("*");
        }
        printf("\n");
    }
    return 0;
}

//-------------------------------------------------------------------------------------------


        //  WAP to print the

        *****
        *   *
        *   *
        *   *
        *****


int main()
{
    int i,j;
    for(i=0;i<5;i++)        // Number of lines
    {
        for(j=0;j<5;j++)        // Number of * per line
        {
            if(i==0 || i==4)
                printf("*");
            else if(j==0 || j==4)
                printf("*");
            else
                printf(" ");
        }
        printf("\n");
    }
    return 0;
}

//------------------------------------------------------------------------------------------

        WAP to Print the following pattern

            *
           **
          ***
         ****
        *****
       ******
      *******



int main()
{
    int i,j;

    for(i=0;i<7;i++)
    {
            for(j=0;j<7;j++)
            {
                if(j<(6-i))
                    printf(" ");
                else
                    printf("*");
            }
            printf("\n");
    }
    return 0;
}

//------------------------------------------------------------------------------------------

        WAP to Print the following pattern

            *
           ***
          *****
         *******
        *********
       ***********
      *************

  */


int main()
{
    int i,j;

    for(i=0;i<7;i++)
    {
            for(j=0;j<(7+i);j++)
            {
                if(j<(6-i))
                    printf(" ");
                else
                    printf("*");
            }
            printf("\n");
    }
    return 0;
}


//--------------------------------------------------------------------------------------------------------------


    // WAP to print following pattern

    ******
     *****
      ****
       ***
        **
         *


int main()
{
    int i,j;

    for(i=0;i<6;i++)
    {
        for(j=0;j<6;j++)
        {
            if(j<i)
            {
                printf(" ");
            }
            else
            {
                printf("*");
            }
        }
        printf("\n");
    }
    return 0;
}

//------------------------------------------------------------------------------------------------

        // WAP to print

                *
                **
                ***
                ****
                *****
                ******
                *******

int main()
{
    int i,j;

    for(i=0;i<7;i++)
    {
        for(j=0;j<=i;j++)
        {
            printf("*");
        }
        printf("\n");
    }
    return 0;
}

//--------------------------------------------------------------------------------

    // WAP to print

    *******
    ******
    *****
    ****
    ***
    **
    *


int main()
{
    int i,j;

    for(i=0;i<7;i++)
    {
       for(j=0;j<(7-i);j++)
       {
           printf("*");
       }
       printf("\n");
    }
}


//----------------------------------------------------------------------------------------------------------

    // WAP to print

    1
    12
    123
    1234
    12345
    123456

int main()
{
    int i,j;

    for(i=0;i<6;i++)
    {
        for(j=0;j<=i;j++)
        {
            printf("%d",j+1);
        }
        printf("\n");
    }
    return 0;
}

//------------------------------------------------------------------------------------------------------

 // WAP to print following pattern

    ABCDEF
     ABCDE
      ABCD
       ABC
        AB
         A
*/

int main()
{
    int i,j;
    int a;
    for(i=0;i<6;i++)
    {
        a=65;
        for(j=0;j<6;j++)
        {
            if(j<i)
            {
                printf(" ");
            }
            else
            {
                printf("%c",a);
                a++;
            }
        }
        printf("\n");
    }
    return 0;
}

//------------------------------------------------------------------------------------------------------------
//------------------------------------------------- Switch Case ----------------------------------------------
//-------------------------------------------------------------------------------------------------------------

	Using case control(switch case):- It is used, when there are some pre-defined possiblities and we have to choose
					  any one according to users choice. in such condition switch case is used. 
	


		Syntax:

			switch(<opt>)
			{
				case 1:
					------------;
					------------;
					break;
				case 2:
					------------;
					------------;
					break;
				case 3:
					------------;
					------------;
					break;
				case 4:
					------------;
					------------;
					break;
				[<default>]:
					------------;
					------------;
			}
			-------------------;
			-------------------;



		Note:
			- No duplicate case allowed.
			- case constant can be 0(zero)
			- cases may be in any sequence
			- case constant can be int or char CONSTANT
			- Use the break statement at the end of every case, otherwise all cases are executed
			  after the matching case.
			- You can write any number of cases
			- default is optional case, which will be executed only in absence of any matching case.
			  normally it is the last case but you can write anywhere in switch, which will not affect
			  the result.



    // WAP to perform the add,sub, multi, div according to  the users choice.

int main()
{
    int opt;
    float n1,n2,ans;

    printf("\n --------- Menu -----------\n");
    printf("\n 1.Add \n 2.sub \n 3.multi \n 4.div");
    printf("\n enter your option: ");
    scanf("%d",&opt);

    printf("\n Enter an two nos: ");
    scanf("%f %f",&n1,&n2);

    switch(opt)
    {
        case 1:
            ans=n1+n2;
            break;
        case 2:
            ans=n1-n2;
            break;
        case 3:
            ans=n1*n2;
            break;
        case 4:
            ans=n1/n2;
            break;
        default:
            printf("\n Incorrect Option..!!!");
            return;
    }
    printf("\n The Answer Is: %f",ans);
    return 0;
}

//-------------------------------------------------------------------------------------------------------


    // using the switch case within decision statements


int main()
{
    int opt;
    float n1,n2,ans;

    printf("\n --------- Menu -----------\n");
    printf("\n 1.Add \n 2.sub \n 3.multi \n 4.div");
    printf("\n enter your option: ");
    scanf("%d",&opt);

    if(opt>=1&&opt<=4)
    {
        printf("\n Enter an two nos: ");
        scanf("%f %f",&n1,&n2);

        switch(opt)
        {
            case 1:
                ans=n1+n2;
                break;
            case 2:
                ans=n1-n2;
                break;
            case 3:
                ans=n1*n2;
                break;
            case 4:
                ans=n1/n2;
        }
        printf("\n The Answer Is: %f",ans);
    }
    else
    {
          printf("\n Incorrect Option..!!!");
    }
    return 0;
}


//-------------------------------------------------------------------------------------------------------


    // using the switch case within loop


int main()
{
    int opt,i=0;
    float n1,n2,ans;

    while(i<3)
    {
        printf("\n --------- Menu -----------\n");
        printf("\n 1.Add \n 2.sub \n 3.multi \n 4.div");
        printf("\n enter your option: ");
        scanf("%d",&opt);

        i++;
        printf("\n Enter an two nos: ");
        scanf("%f %f",&n1,&n2);

        switch(opt)
        {
            case 1:
                ans=n1+n2;
                break;
            case 2:
                ans=n1-n2;
                break;
            case 3:
                ans=n1*n2;
                break;
            case 4:
                ans=n1/n2;
                break;
            default:
                printf("\n Incorrect Option..!!!");
        }
        printf("\n The Answer Is: %f",ans);
    }
    return 0;
}


//-------------------------------------------------------------------------------------------------------


    // using the switch case within infinite loop (using break to stop)


int main()
{
    int opt,i=0;
    float n1,n2,ans;

    while(1)
    {
        printf("\n --------- Menu -----------\n");
        printf("\n 1.Add \n 2.sub \n 3.multi \n 4.div \n 5.stop");
        printf("\n enter your option: ");
        scanf("%d",&opt);
        if(opt==5)
        {
            break; // It will pass the control out of the while() loop
        }

        i++;
        printf("\n Enter an two nos: ");
        scanf("%f %f",&n1,&n2);

        switch(opt)
        {
            case 1:
                ans=n1+n2;
                break;
            case 2:
                ans=n1-n2;
                break;
            case 3:
                ans=n1*n2;
                break;
            case 4:
                ans=n1/n2;
                break;
            default:
                printf("\n Incorrect Option..!!!");
        }
        printf("\n The Answer Is: %f",ans);
    }
    return 0;
}

//-------------------------------------------------------------------------------------------------------


    // using the switch case within infinite loop (using exit() to stop)


int main()
{
    int opt,i=0;
    float n1,n2,ans;

    while(1)
    {
        printf("\n --------- Menu -----------\n");
        printf("\n 1.Add \n 2.sub \n 3.multi \n 4.div \n 5.stop");
        printf("\n enter your option: ");
        scanf("%d",&opt);

        i++;
        printf("\n Enter an two nos: ");
        scanf("%f %f",&n1,&n2);

        switch(opt)
        {
            case 1:
                ans=n1+n2;
                break;
            case 2:
                ans=n1-n2;
                break;
            case 3:
                ans=n1*n2;
                break;
            case 4:
                ans=n1/n2;
                break;
            case 5:
                exit(0);
            default:
                printf("\n Incorrect Option..!!!");
        }
        if(opt>=1&&opt<=4)
            printf("\n The Answer Is: %f",ans);
    }
    return 0;
}

//------------------------------------------------------------------------------------------------------------

    // using char as a option in the switch case
*/

int main()
{
    char opt;
    float n1,n2,ans;

    printf("\n --------- Menu -----------\n");
    printf("\n a.Add \n b.sub \n c.multi \n d.div");
    printf("\n enter your option: ");
    scanf("%c",&opt);

    printf("\n Enter an two nos: ");
    scanf("%f %f",&n1,&n2);

    switch(opt)
    {
        case 'a':
        case 'A':
            ans=n1+n2;
            break;
        case 'b':
        case 'B':
            ans=n1-n2;
            break;
        case 'c':
        case 'C':
            ans=n1*n2;
            break;
        case 'd':
        case 'D':
            ans=n1/n2;
            break;
        default:
            printf("\n Incorrect Option..!!!");
            return;
    }
    printf("\n The Answer Is: %f",ans);
    return 0;
}

//------------------------------------------------------------------------------------------------------------

    // using default case if a different way


int main()
{
    char opt;
    float n1,n2,ans;

    printf("\n --------- Menu -----------\n");
    printf("\n a.Add \n b.sub \n c.multi \n d.div");
    printf("\n enter your option: ");
    scanf("%c",&opt);

    printf("\n Enter an two nos: ");
    scanf("%f %f",&n1,&n2);

    switch(opt)
    {
        case 'a':
        case 'A':
            ans=n1+n2;
            break;
        case 'b':
        case 'B':
            ans=n1-n2;
            break;
        default:
            printf("\n Incorrect Option..!!!");
            return;
        case 'c':
        case 'C':
            ans=n1*n2;
            break;
        case 'd':
        case 'D':
            ans=n1/n2;
            break;
    }
    printf("\n The Answer Is: %f",ans);
    return 0;
}

//--------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------

	Using Unconditional Control Statements:  These control statements does not need any condition.


			There are 4 different unconditional control statements, and these are,

				goto,	  continue,	 break,       return


	// Using goto: It is used to transfer the control anywhere in the program unconditionaly using <tag_nm>
		       it is not recommended to used coz it will disturb the logical arrangement of the instructions.


			syntax:
			
				-------------------;
				<tag_nm>: ---------;
				-------------------;
				-------------------;
				-------------------;
				goto <tag_nm>;
				-------------------;
				-------------------;
				-------------------;



//-----------------------------------------------------------------------------------------------------------------------

            // Using the goto

        // write a program to add 1-10 nos using goto

int main()
{
    int no,tot;

    tot=0;
    no=1;
    back: tot=tot+no;
    no++;
    if(no<=10)
    {
        goto back;
    }
    printf("\n Total is: %d",tot);

    return 0;
}


//------------------------------------------------------------------------------------

        // Using the continue: It will keep the loop in the running condition without considering the
                               remaining body of loop, means it will push the looping to the next iteration.


int main()
{
    int i,j;

    for(i=0;i<5;i++)
    {
        for(j=0;j<5;j++)
        {
            printf("-");
            if(j>i)
                continue;
            printf("*");
        }
        printf("\n");
    }
    return 0;
}


//-------------------------------------------------------------------------------------

        //  Using the break: It will terminate the enclosing loop.
		           		

int main()
{
    int i,j;

    for(i=0;i<5;i++)
    {
        for(j=0;j<5;j++)
        {
            printf("-");
            if(j>i)
                break;
            printf("%d",j);
        }
        printf("\n");
    }
    return 0;
}


//-------------------------------------------------------------------------------------------------------------------

    // Using return statement: It will pass the program control back to calling function from called function.
                                (will see later in Function Topic)


//=======================================================================================================================

//================================================= ARRAY IN C PROGRAMMING ==============================================

//=======================================================================================================================


		Array is derived data type, which is indexed/ordered collection of elements having same data type and continuously 
		arranged in the memory.

			syntax:
				<data_type> <ar_nm>[<element_count>];

				e.g.
					int ar[5];

					ar 0    1    2    3    4   <--- index
					  [  ] [  ] [  ] [  ] [  ] <---- value
					 700   704  708  712  716 <---- Address  
		

			Note: 
				- Array index i.e. <element_count> must be constant.
				- Array counting starts from 0
				- ar[i] gives the value at i th location, where i is an index
				- &ar[i] gives the Address of i th location
				



	// WAP to store HSC percentage of all student from your class 

		per
   		 [    ][    ][    ][    ][    ]
		4 bytes each


int main()
{
	float per[5];

	printf("\n Enter the percentage of 5 students in HSC: ");
	scanf("%f",&per[0]);
	scanf("%f",&per[1]);
	scanf("%f",&per[2]);
	scanf("%f",&per[3]);
	scanf("%f",&per[4]);

	printf("\n percentage of 5 students in HSC: \n");
	printf("\t %f",per[0]);
	printf("\t %f",per[1]);
	printf("\t %f",per[2]);
	printf("\t %f",per[3]);
	printf("\t %f",per[4]);

	return 0;
}



	
	// WAP to store HSC percentage of all students in your class.

		per  0      1       2       3       4
		  [    ]  [    ]  [    ]  [    ]  [    ]
int main()
{
	float per[5];
	int i;

	printf("\n Enter the percentage of 5 students in HSC: ");
	for(i=0;i<5;i++)
    	{
       	   scanf("%f",&per[i]);
    	}


	printf("\n percentage of 5 students in HSC: \n");
	for(i=0;i<5;i++)
    	{
           printf("\t %f",per[i]);
    	}

	return 0;
}


//-------------------------------------------------------------------------------------------------------------------------------------

	// Initilization Of Array: Assigning the values at the time of memory allocation(decl).

		int x[4]={23,89,45,18};			
		
		Only In the initilization of array, Index is optional.

		float y[]={ 4.5, 67.89, 3.623, 90.56, 37.91 }  is equivalent to   float y[5]={ 4.5, 67.89, 3.623, 90.56, 37.91 }


// Init array and display it

        x
        [12] [56] [90] [5] [23]

int main()
{
    int x[5]={12,56,90,5,23},i;

    printf("\n Elements are: ");
    for(i=0;i<5;i++)
    {
        printf("   %d",x[i]);
    }
    return 0;
}

//------------------------------------------------------


// Input array and display it

        x
        [] [] [] [] []

int main()
{
    int x[5],i;

    printf("\n Enter any 5 nos: ");
    for(i=0;i<5;i++)
    {
        scanf("%d",&x[i]);
    }

    printf("\n Elements are: ");
    for(i=0;i<5;i++)
    {
        printf("   %d",x[i]);
    }
    return 0;
}

//---------------------------------------------------------

    // WAP to add all elements from the array of five elements

	nos
          [12] [56] [90] [5] [23]

int main()
{
    // decl. 
    int nos[5],i,tot;

    // Array Input
    printf("\n Enter any 5 nos: ");
    for(i=0;i<5;i++)
    {
        scanf("%d",&nos[i]);
    }

    // Processing
    tot=0;
    for(i=0;i<5;i++)
    {
        tot=tot+nos[i];
    }

    // Array Display
    printf("\n Array Elements are: ");
    for(i=0;i<5;i++)
    {
        printf("\t %d",nos[i]);
    }
    printf("\n Addition of all nos: %d",tot);
    return 0;
}

//-------------------------------------------------------------------------------------------------

    // Enter the array of 10 integers and count the even elements.

    x  0     1     2    3     4     5     6     7      8    9
     [23]  [45]  [90]  [81]  [72]  [12]  [34]  [67]  [19]  [57]

int main()
{
    // Decl
    int x[10],i,ecnt=0;

    // Input
    printf("\n Enter any 10 Nos: ");
    for(i=0;i<10;i++)
    {
        scanf("%d",&x[i]);
    }

    // Process
    for(i=0;i<10;i++)
    {
        if(x[i]%2==0)
        {
            ecnt++;
        }
    }

    // display
    printf("\n Array elements are: ");
    for(i=0;i<10;i++)
    {
        printf("%5d",x[i]);
    }
    printf("\n Element Count is: %d",ecnt);

    return 0;
}

//-------------------------------------------------------------------------

    // WAP to find max from collection of 10 integers

     x 0     1     2    3     4     5     6     7      8    9        max
     [23]  [45]  [90]  [81]  [72]  [12]  [34]  [67]  [19]  [57]      90


int main()
{
    int x[10],i,max;

    printf("\n Enter 10 nos: ");
    for(i=0;i<10;i++)
    {
        scanf("%d",&x[i]);
    }

    max=x[0];
    for(i=1;i<10;i++)
    {
        if(x[i]>max)
        {
            max=x[i];
        }
    }

    printf("\n elements are: ");
    for(i=0;i<10;i++)
    {
        printf("%6d",x[i]);
    }
    printf("\n Max number: %d",max);

    return 0;
}

//----------------------------------------------------------------------------------------

    // Enter the array of 10 nos and find the presence of entered no in an array.



     x 0     1     2    3     4     5     6     7      8    9        no		cnt
     [23]  [45]  [90]  [81]  [72]  [45]  [34]  [67]  [45]  [57]      [45]	 3

        output: 45 is present 3 times in an array

int main()
{
    int x[10],no,i,cnt=0;

    printf("\n Enter 10 nos: ");
    for(i=0;i<10;i++)
    {
        scanf("%d",&x[i]);
    }

    printf("\n Enter the no: ");
    scanf("%d",&no);

    for(i=0;i<10;i++)
    {
        if(x[i]==no)
        {
            cnt++;
        }
    }

    printf("\n elements are: ");
    for(i=0;i<10;i++)
    {
        printf("%6d",x[i]);
    }
    printf("\n %d is present %d times in an array",no,cnt);

    return 0;
}

//----------------------------------------------------------------------------------------

  
    // WAP to find the prime nos from array (display the list)


   nos 0    1     2     3     4     5     6     7      8    9
     [23]  [45]  [90]  [81]  [72]  [45]  [34]  [67]  [45]  [57]


int main()
{
    int nos[10],i,no,flg,d;

    printf("\n Enter any 10 Nos: ");
    for(i=0;i<10;i++)
    {
        scanf("%d",&nos[i]);
    }

    printf("\n Array Elements: ");
    for(i=0;i<10;i++)
    {
        printf("%6d",nos[i]);
    }

    printf("\n Prime List: ");
    for(i=0;i<10;i++)
    {
        no=nos[i];
        flg=0;
        d=2;
        while(d<=(no/2))
        {
            if(no%d==0)
            {
                flg=1;
                break;
            }
            d++;
        }
        if(flg==0)
        {
            printf("%6d",no);
        }
    }
    return 0;
}

    // Same program without using variable no

int main()
{
    int nos[10],i,flg,d;

    printf("\n Enter any 10 Nos: ");
    for(i=0;i<10;i++)
    {
        scanf("%d",&nos[i]);
    }

    printf("\n Array Elements: ");
    for(i=0;i<10;i++)
    {
        printf("%6d",nos[i]);
    }

    printf("\n Prime List: ");
    for(i=0;i<10;i++)
    {
        flg=0;
        d=2;
        while(d<=(nos[i]/2))
        {
            if(nos[i]%d==0)
            {
                flg=1;
                break;
            }
            d++;
        }
        if(flg==0)
        {
            printf("%6d",nos[i]);
        }
    }
    return 0;
}

//---------------------------------------------------------------------------------------------------------------------

    // WAP to count the Armstrong numbers in an array

   nos 0    1     2     3     4     5     6     7      8       9
     [23]  [45]  [90]  [81]  [72]  [153]  [34]  [67]  [1634]  [57]
*/

int main()
{
    int nos[10],i,j,flg,d,no,dc,sum=0,a,rem,cnt=0;

    printf("\n Enter any 10 Nos: ");
    for(i=0;i<10;i++)
    {
        scanf("%d",&nos[i]);
    }

    printf("\n Array Elements: ");
    for(i=0;i<10;i++)
    {
        printf("%6d",nos[i]);
    }
    printf("\n list of Armstrong Nos: ");
    for(i=0;i<10;i++)
    {
        no=nos[i];
        for(dc=0;no!=0;no=no/10,dc++);
        //printf("\n Digit Count: %d",dc);

        sum=0;
        no=nos[i];
        while(no!=0)
        {
            rem=no%10;
            no=no/10;

            a=1;
            j=0;
            while(j<dc)
            {
                a=a*rem;
                j++;
            }
            sum=sum+a;
            //printf("\n %d ^ %d is %d",rem,dc,a);
        }
        if(nos[i]==sum)
        {
            printf("\t %d",nos[i]);
            cnt++;
        }
    }
    printf("\n Armstrong element count: %d",cnt);

    return 0;
}

//--------------------------------------------------------------------------------------------------------------------

	// WAP to read the array elements in reverse manner.


	x  0     1    2     3     4
	 [556] [45] [692] [455] [978]



int main()
{
    int x[5],i;

    printf("\n Enter the 5 Nos: ");
    for(i=0;i<5;i++)
    {
        scanf("%d",&x[i]);
    }

    printf("\n The array Elements are: ");
    for(i=0;i<5;i++)
    {
        printf("%5d",x[i]);
    }

    printf("\n The array Elements In Reverse Manner(I): ");
    for(i=0;i<5;i++)
    {
        printf("%5d",x[4-i]);
    }

    printf("\n The array Elements In Reverse Manner(II): ");
    for(i=4;i>=0;i--)
    {
        printf("%5d",x[i]);
    }
    return 0;
}

//--------------------------------------------------------------------------------------------------------------------

	// WAP to copy the array elements at another location.


	x  0     1    2     3     4
	 [556] [45] [692] [455] [978]
           |     |    |     |     |
	   V     V    V     V     V
    y  0     1    2     3     4
	 [556] [45] [692] [455] [978]



int main()
{
    int x[5],y[5],i;

    printf("\n Enter the 5 Nos: ");
    for(i=0;i<5;i++)
    {
        scanf("%d",&x[i]);
    }

    for(i=0;i<5;i++)
    {
        y[i]=x[i];
    }

    printf("\n The Array x: ");
    for(i=0;i<5;i++)
    {
        printf("%5d",x[i]);
    }

    printf("\n The Array y: ");
    for(i=0;i<5;i++)
    {
        printf("%5d",y[i]);
    }

    return 0;
}
//---------------------------------------------------------------------------------

    // WAP to copy the array elements at another location in reverse manner.

	x  0     1    2     3     4
	 [556] [45] [692] [455] [978]


    y  0     1    2     3     4
	 [978] [455] [692] [45] [556]


int main()
{
    int x[5],y[5],i;

    printf("\n Enter the 5 Nos: ");
    for(i=0;i<5;i++)
    {
        scanf("%d",&x[i]);
    }

    for(i=0;i<5;i++)
    {
        y[i]=x[4-i];
    }

    printf("\n The Array x: ");
    for(i=0;i<5;i++)
    {
        printf("%5d",x[i]);
    }

    printf("\n The Array y: ");
    for(i=0;i<5;i++)
    {
        printf("%5d",y[i]);
    }

    return 0;
}

//----------------------------------------------------------------------


int main()
{
    int x[5],y[5],i,j;

    printf("\n Enter the 5 Nos: ");
    for(i=0;i<5;i++)
    {
        scanf("%d",&x[i]);
    }

    for(i=0,j=4;i<5;i++,j--)
    {
        y[i]=x[j];
    }

    printf("\n The Array x: ");
    for(i=0;i<5;i++)
    {
        printf("%5d",x[i]);
    }

    printf("\n The Array y: ");
    for(i=0;i<5;i++)
    {
        printf("%5d",y[i]);
    }

    return 0;
}

//-----------------------------------------------------------------------------------

    // Enter the price of 7 items and find the total bill. the discount is 6% when bill is upto 1000 otherwise 14%


int main()
{
    float pr[7],tot,dis;
    int i;

    printf("\n Enter the price of 7 Items: ");
    for(i=0;i<7;i++)
    {
        scanf("%f",&pr[i]);
    }

    tot=0.0;
    for(i=0;i<7;i++)
    {
        tot=tot+pr[i];
    }

    if(tot<=1000)
        dis=tot*0.06;
    else
        dis=tot*0.14;

    printf("\n Price of 7 Items: ");
    for(i=0;i<7;i++)
    {
        printf("%9.3f",pr[i]);
    }
    printf("\n Total Bill: %6.2f",tot);
    printf("\n Discount: %6.2f",dis);
    printf("\n Pay Rs: %6.2f",(tot-dis));

    return 0;
}
//----------------------------------------------------------------------------------------------------------

	// Enter the N nos and add even and odd nos separately

	[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]



int main()
{
    int x[100],i,cnt;
    int et=0,ot=0;

    printf("\n Enter the element count: ");
    scanf("%d",&cnt);
    if(cnt>100)
    {
        printf("\n Insufficient Memory...!!");
        return;
    }

    printf("\n Enter the %d elements: ",cnt);
    for(i=0;i<cnt;i++)
    {
        scanf("%d",&x[i]);
    }

    // process
    for(i=0;i<cnt;i++)
    {
        if(x[i]%2==0)
        {
            et=et+x[i];
        }
        else
        {
            ot=ot+x[i];
        }
    }

    printf("\n The %d Elements:",cnt);
    for(i=0;i<cnt;i++)
    {
        printf("%6d",x[i]);
    }

    printf("\n Even Total: %d \t Odd Total: %d",et,ot);

    return 0;
}


//-----------------------------------------------------------------------------------------------------------

    Using #define: It is used to decl a constant


#define SIZE 100
int main()
{
    int x[SIZE],i,cnt;
    int et=0,ot=0;

    printf("\n Enter the element count: ");
    scanf("%d",&cnt);
    if(cnt>100)
    {
        printf("\n Insufficient Memory...!!");
        return;
    }

    printf("\n Enter the %d elements: ",cnt);
    for(i=0;i<cnt;i++)
    {
        scanf("%d",&x[i]);
    }

    // process
    for(i=0;i<cnt;i++)
    {
        if(x[i]%2==0)
        {
            et=et+x[i];
        }
        else
        {
            ot=ot+x[i];
        }
    }

    printf("\n The %d Elements:",cnt);
    for(i=0;i<cnt;i++)
    {
        printf("%6d",x[i]);
    }

    printf("\n Even Total: %d \t Odd Total: %d",et,ot);

    return 0;
}

*/
//---------------------------------------------------------------------------------------------------

    // Enter any 10 nos and replace all odd number with -3.

int main()
{
    int x[5],i;

    printf("\n Enter 5 nos: ");
    for(i=0;i<5;i++)
    {
        scanf("%d",&x[i]);
    }

    printf("\n Array Elements are: ");
    for(i=0;i<5;i++)
    {
        printf("%5d",x[i]);
    }
    // process
    for(i=0;i<5;i++)
    {
        if(x[i]%2!=0)
        {
            x[i]=-3;
        }
    }

    printf("\n Array Elements are(After Replacement): ");
    for(i=0;i<5;i++)
    {
        printf("%5d",x[i]);
    }

    return 0;
}
//--------------------------------------------------------------------------------------------------------------------

	// Write a program to append the element in an array. ( Insert at end )

#define SIZE 11
int main()
{
    int x[SIZE],i,cnt,opt;

    printf("\n Enter the element count: ");
    scanf("%d",&cnt);
    if(cnt>11)
    {
        printf("\n Insufficient Memory...!!");
        return;
    }

    printf("\n Enter the array of %d elements: ",cnt);
    for(i=0;i<cnt;i++)
    {
        scanf("%d",&x[i]);
    }

    do
    {
        printf("\n Array Elements are: ");
        for(i=0;i<cnt;i++)
        {
            printf("%6d",x[i]);
        }
        printf("\n\n Press 1 to input another number and 2 to stop: ");
        scanf("%d",&opt);
        if(opt==1)
        {
            if(cnt==11)
            {
                printf("\n Array is Full, Unable to input another element");
            }
            else
            {
                printf("\n Enter any Number: ");
                scanf("%d",&x[cnt]);
                cnt++;
            }
        }
        else if(opt==2)
        {
            break;
        }
        else
        {
            printf("\n Incorrect Option...!!!");
        }
    }while(1);

    printf("\n End Of Program");
    return 0;
}

//-------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------

	// Sorting and Searching Techniques:

		Searching Techniques: It refers to finding the elements are present in the array or not.

			There are two different types of search teniques
			
				- Sequential search:
				- Binary search


		- Sequential search: It this technique, we have start from 0th position after that 1st and so on.. till
				     the end.
			

int main()
{
    int arr[10],i,no,pos=-1;

    printf("\n Enter ten nos: ");
    for( i=0 ; i<10 ; i++ )
    {
        scanf("%d",&arr[i]);
    }

    printf("\n Enter the number to be searched: ");
    scanf("%d",&no);

    for(i=0;i<10;i++)
    {
        if(arr[i]==no)
        {
            pos=i;
            break;
        }
    }
    printf("\n Array Elements: ");
    for( i=0 ; i<10 ; i++ )
    {
        printf("%5d",arr[i]);
    }
    if(pos!=-1)
        printf("\n %d is present at %d position",no,pos);
    else
        printf("\n %d is not present in array",no);
    return 0;
}

//---------------------------------------------------------------------------------------------------------

	- Binary search: In case of binary search implementation, the array must be sorted. 

		steps:
			1. mark start and end position

			2. calc the mid position [ mid=(start+end)/2 ]

			3. check the number is present at mid position or not.

				if Yes --> print the no is present at xx position

					   |--> check the no is less than arr[mid],then end=mid-1 
				if No  --> |
					   |--> check the no is greater than arr[mid],then start=mid+1

			4. perform same operatiom till start is less than or equals to end.
			

int main()
{
    int arr[10],i,no,pos=-1;
    int start, mid, end;

    printf("\n Enter ten nos: ");
    for( i=0 ; i<10 ; i++ )
    {
        scanf("%d",&arr[i]);
    }

    printf("\n Enter the number to be searched: ");
    scanf("%d",&no);

    start=0;
    end=9;
    do
    {
        mid=(start+end)/2;
        if(arr[mid]==no)
        {
            pos=mid;
            break;
        }
        else if(no<arr[mid])
        {
            end=mid-1;
        }
        else // if(no>arr[mid])
        {
            start=mid+1;
        }
    }while(start<=end);


    printf("\n Array Elements: ");
    for( i=0 ; i<10 ; i++ )
    {
        printf("%5d",arr[i]);
    }
    if(pos!=-1)
        printf("\n %d is present at %d position",no,pos);
    else
        printf("\n %d is not present in array",no);
    return 0;
}



///-----------------------------------------------------------------------------------------------------

            // Sorting techniques:

                Sorting refers to arranging the array elements either
                in ascending order or in descending order. There are several different
                techniques, from which we have to study

                    - Selection Sort
                    - Bubble Sort
                    - Insertion Sort



     - Selection Sort


int main()
{
    int x[10],i,j,tmp;

    printf("\n Enter ten nos: ");
    for(i=0;i<10;i++)
    {
        scanf("%d",&x[i]);
    }

    for( i=0 ; i<9 ;i++ )
    {
        for( j=i+1 ; j<10 ; j++ )
        {
            if(x[j]<x[i])
            {
                tmp=x[i];
                x[i]=x[j];
                x[j]=tmp;
            }
        }
    }
    printf("\n Sorted Elements: ");
    for(i=0;i<10;i++)
    {
        printf("%5d",x[i]);
    }
    return 0;
}

//-------------------------------------------------------------------------------


  Bubble Sort



int main()
{
    int x[10],i,j,tmp;

    printf("\n Enter ten nos: ");
    for(i=0;i<10;i++)
    {
        scanf("%d",&x[i]);
    }

    for( i=0 ; i<9 ;i++ )
    {
        for( j=0 ; j<(9-i) ; j++ )
        {
            if(x[j]>x[j+1])
            {
                tmp=x[j];
                x[j]=x[j+1];
                x[j+1]=tmp;
            }
        }
    }
    printf("\n Sorted Elements: ");
    for(i=0;i<10;i++)
    {
        printf("%5d",x[i]);
    }
    return 0;
}



//-------------------------------------------------------------------------------

  Insertion Sort

*/

int main()
{
    int x[10],i,j,tmp;

    printf("\n Enter ten nos: ");
    for(i=0;i<10;i++)
    {
        scanf("%d",&x[i]);
    }

    for( i=1 ; i<10 ; i++)
    {
        tmp=x[i];
        j=i-1;
        while(j>=0&&x[j]>tmp)
        {
            x[j+1]=x[j];
            j--;
        }
        x[j+1]=tmp;
    }

    printf("\n Sorted Elements: ");
    for(i=0;i<10;i++)
    {
        printf("%5d",x[i]);
    }
    return 0;
}


//-------------------------------------------------------------------------------------------------------

        // WAP to collect all negative elements at left and all positive at rh+ side of array

            e.g.
                Input Array:
                    34   -4    23    9    -2    201     -11    85     -34     -1

                Processed array:
                    -4     -2     -11     -34    -1    34     23     9    201    85

int main()
{
    int x[10],i,j,k,tmp;

    printf("\n Enter any 10 nos: ");
    for(i=0;i<10;i++)
    {
        scanf("%d",&x[i]);
    }
    for(i=0;i<9;i++)
    {
        if(x[i]>=0)
        {
            for(j=i+1;j<10;j++)
            {
                if(x[j]<0)
                {
                    tmp=x[i];
                    x[i]=x[j];
                    x[j]=tmp;
                    break;
                }
            }
        }
//        printf("\n");
//        for(k=0;k<10;k++)
//        {
//            printf("%5d",x[k]);
//        }
    }
    printf("\n Elements are: ");
    for(i=0;i<10;i++)
    {
        printf("%5d",x[i]);
    }
    return 0;
}

//-------------------------------------------------------------------------------------------------------

  WAP to find the intersection of two arrays.

        x
         { 23,-5,89,12,9 }

        y
         { 9,-34,12,100,-5 }

        Intersection:
            { -5, 12, 9 }


int main()
{
    int x[5],y[5],i,j,k,tmp;

    printf("\n Enter any 5 nos: ");
    for(i=0;i<5;i++)
    {
        scanf("%d",&x[i]);
    }

    printf("\n Enter any 5 nos: ");
    for(i=0;i<5;i++)
    {
        scanf("%d",&y[i]);
    }
    printf("\n Intersection of 2 arrays: ");
    for(i=0;i<5;i++)
    {
        for(j=0;j<5;j++)
        {
            if(x[i]==y[j])
                printf("%5d",x[i]);
        }
    }
    return 0;
}

//--------------------------------------------------------------------------

    // WAP to merge the two different arrays in a such way that there should not be
    // any duplicate element.

        e.g.
                x
                {12, 45, 78, 38, 45}

                y
                {78, 90, 123, 12, 100}

                z
                {12,45,78,38,90,123,100}

int main()
{
    int x[5],y[5],z[10];
    int flg,cnt=0,i,j;

    printf("\n Enter any 5 nos: ");
    for(i=0;i<5;i++)
    {
        scanf("%d",&x[i]);
    }

    printf("\n Enter any 5 nos: ");
    for(i=0;i<5;i++)
    {
        scanf("%d",&y[i]);
    }

    for(i=0;i<5;i++)
    {
        flg=0;
        for(j=0;j<cnt;j++)
        {
           if(x[i]==z[j])
           {
               flg=1;
               break;
           }
        }
        if(flg==0)
        {
            z[cnt]=x[i];
            cnt++;
        }
    }
    for(i=0;i<5;i++)
    {
        flg=0;
        for(j=0;j<cnt;j++)
        {
           if(y[i]==z[j])
           {
               flg=1;
               break;
           }
        }
        if(flg==0)
        {
            z[cnt]=y[i];
            cnt++;
        }
    }
    printf("\n Elements in z: ");
    for(i=0;i<cnt;i++)
    {
        printf("%6d",z[i]);
    }
    return 0;
}

//---------------------------------------------------------------------------

        Enter the array of +ve and -ve elements, and find series of elements
        having summation zero.

        2  5  -3  -4  9  -3  -5  1  4

        2  5  -3  -4
        5  -3  -4  9  -3  -5  1
        -5  1  4

        print all possible and longest among them

int main()
{
    int x[9],i,j,k,flg,tot;
    int pos,cnt;

    printf("\n Enter any 9 nos: ");
    for(i=0;i<9;i++)
    {
        scanf("%d",&x[i]);
    }

    for(i=0;i<8;i++)
    {
        flg=0;
        tot=x[i];
        for(j=i+1;j<9;j++)
        {
            tot=tot+x[j];
            if(tot==0)
            {
                flg=1;
                break;
            }
        }
        if(flg==1)
        {
            if(cnt<(j-i+1))
            {
                pos=i;
                cnt=(j-i+1);
            }
            printf("\n");
            for(k=i;k<=j;k++)
            {
                printf("%5d",x[k]);
            }
        }
    }
    printf("\n longest sequence: ");
    for(i=0;i<cnt;i++)
    {
        printf("%5d",x[pos]);
        pos++;
    }
    return 0;
}
//-----------------------------------------------------------------------------------------

    // WAP to find the contiguous increasing subsequnce in array


        223     39      2       7       23      89      -12      90      190     255

        contiguous increasing subsequnce:

            2       7       23      89
            90      190     255


//-----------------------------------------------------------------------------------------

    // WAP to find the contiguous subarray that has the largest sum.

        -2      -3      4       -1      -2      1       5       -3
//=================================================================================================
//=================================================================================================
//=================================================================================================

    // 2D array:  It is collection of 1D Array.

	We know that array is collection of elements having same data type.

		data type-|
			  |- Built-in - int, char, float, double
			  |- derived  - Array, Pointer
			  |- user defined - structure, union and enum


		int a;			char ch;		float ft;		double db;

		a			ch			ft			db
		[       ]                 [ ]                      [     ]                [           ]
                4 bytes			1 byte			   4 bytes		     8 bytes

	These elements are used to store single value. and when we want to store the collection of elements.
	then the array is used.

		int x[5]; 

		x  0      1      2      3      4
		 [    ] [    ] [    ] [    ] [    ]    <-- this is one collection say $, then there may be collection of $'s




                                                   0 1 2 3
                collection of 4 int values   ==>  [][][][]
			

                                                        0           1           2         3         4
                                                      0 1 2 3    0 1 2 3    0 1 2 3    0 1 2 3   0 1 2 3
                colllection of 5 such elelemts  ===> [][][][] | [][][][] | [][][][] | [][][][] | [][][][]

	
	How to create the such collection:  It is created by using decl. as shown


			<data_type> <ar_nm>[No_of_elements][<Size_of_every_internal_elements>];

		e.g.
			In above case,
					int x[5][4];

		can be represented in matrix from as,

				[][][][] 0
				[][][][] 1
				[][][][] 2	There are 5 different rows
				[][][][] 3
				[][][][] 4
		                0 1 2 3 
			4 different cols in each row



        The memory map look like as,

     ________0____________________1________________2______________3_________________4__________
    |    0  1  2  3   |    0  1  2  3   |    0  1  2  3   |   0  1  2  3   |   0  1  2  3    |
    |   [] [] [] []   |   [] [] [] []   |   [] [] [] []   |   [] [] [] []  |   [] [] [] []   |
    |_________________|_________________|_________________|________________|_________________|


		// Init and display 2D Array.


		<data_type> <ar_nm>[<rows>][<cols>]={ {#,#,#..}, {#,#,#..}, {#,#,#..},{#,#,#..}, {#,#,#..}...};

		  e.g.

            		int x[4][3]={ {11,22,33}, {12,23,34}, {67,78,26}, {90,82,59} };


	// Init 2D Array and display it.

int main()
{
	int x[4][3]={ {11,22,33}, {12,23,34}, {67,78,26}, {90,82,59} };
	int i,j;

	printf("\n Array Elements are: ");
	for(i=0;i<4;i++)
	{
		for(j=0;j<3;j++)
		{
			printf("%5d",x[i][j]);
		}
		printf("\n");
	}	
	return 0;
}

//-------------------------------------------------------------------------------

    // Input and display the 2D Array

        ar
         [][][][] 0
         [][][][] 1
         [][][][] 2
         0 1 2 3

int main()
{
    int ar[3][4];
    int i,j;

    printf("\n Enter the array of 3x4: ");
    for(i=0;i<3;i++) //Outer loop: No of rows
    {
        for(j=0;j<4;j++) //Inner loop: no of cols in each row
        {
            scanf("%d",&ar[i][j]);
        }
    }
    printf("\n Array Elements are \n");
	for(i=0;i<3;i++)
	{
		for(j=0;j<4;j++)
		{
			printf("%5d",ar[i][j]);
		}
		printf("\n");
	}
	return 0;
}

//---------------------------------------------------------------------------

    // WAP to add every row of array.

         [][][] 0
         [][][] 1
         [][][] 2
         0 1 2 


int main()
{
    // decl: memory allocation
    int x[3][3],i,j,sum;

    // Array Input
    printf("\n Enter the array of 3x3: ");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            scanf("%d",&x[i][j]);
        }
    }

    // Array Display
    printf("\n Array Elements are\n");
    for(i=0;i<3;i++)
    {
        sum=0;
        for(j=0;j<3;j++)
        {
            sum=sum+x[i][j];
            printf("%5d",x[i][j]);
        }
        printf(" ==> %d\n",sum);
    }
    return 0;
}

//-----------------------------------------------------------------------------------

    // WAP to store the runs scored by 3 player in 5 matches and display all runs with total

                x
   Player 0     [][][][][][]
   Player 1     [][][][][][]
   Player 2     [][][][][][]
                0 1 2 3 4 5
                  Match
*/
int main()
{
    int x[3][6],p,m,tot;

    printf("\n Enter the score of player in each match\n");
    for(p=0;p<3;p++)
    {
        tot=0;
        printf("\n Player %d: \n",p+1);
        for(m=0;m<5;m++)
        {
            printf("\n Match %d: ",m+1);
            scanf("%d",&x[p][m]);
            tot=tot+x[p][m];
        }
        x[p][m]=tot;
    }

    printf("\n Score and total of each player \n");
    for(p=0;p<3;p++)
    {
         printf("\n Player %d: ",p+1);
         for(m=0;m<5;m++)
         {
             printf("%5d",x[p][m]);
         }
         printf("\t Total Runs: %d\n",x[p][m]);
    }
    return 0;
}



//----------------------------------------------------------------------------------

    // WAP to add two arrays


int main()
{
    int a[3][3],b[3][3],c[3][3];
    int i,j;

    printf("\n Enter the array of 3x3: ");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
    printf("\n Enter another array of 3x3: ");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            scanf("%d",&b[i][j]);
        }
    }

    // addition
    printf("\n Enter the array of 3x3: ");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            c[i][j]=a[i][j]+b[i][j];
        }
    }

    // display
    printf("\n Array A \n");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            printf("%5d",a[i][j]);
        }
        printf("\n");
    }
    printf("\n Array B \n");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            printf("%5d",b[i][j]);
        }
        printf("\n");
    }
    printf("\n Array C \n");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            printf("%5d",c[i][j]);
        }
        printf("\n");
    }
    return 0;
}


//----------------------------------------------------------------------------------

    // WAP to add muti. arrays
*/

int main()
{
    int a[3][3],b[3][3],c[3][3];
    int i,j,k;

    printf("\n Enter the array of 3x3: ");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
    printf("\n Enter another array of 3x3: ");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            scanf("%d",&b[i][j]);
        }
    }

    // multi.
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            c[i][j]=0;
            for(k=0;k<3;k++)
            {
                c[i][j]= c[i][j]+( a[i][k]*b[k][j] );
            }
        }
    }

    // display

    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            printf("%5d",a[i][j]);
        }
        printf("\t\t");

        for(j=0;j<3;j++)
        {
            printf("%5d",b[i][j]);
        }
        printf("\t\t");

        for(j=0;j<3;j++)
        {
            printf("%5d",c[i][j]);
        }
        printf("\n");
    }
    return 0;
}


//-----------------------------------------------------------------------------

    // WAP to display the transpose of matrix

        Entered matrix              Transpose

        1   2   3                   1   4   7
        4   5   6                   2   5   8
        7   8   9                   3   6   9



int main()
{
    int x[3][3],y[3][3],i,j;

    printf("\n Enter the 3x3 matrix: ");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            scanf("%d",&x[i][j]);
        }
    }

    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            y[i][j]=x[j][i];
        }
    }

    printf("\n Matrix \t\t Transpose\n");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            printf("%5d",x[i][j]);
        }
        printf("\t\t");

        for(j=0;j<3;j++)
        {
            printf("%5d",y[i][j]);
        }
        printf("\n");
    }
    return 0;
}

//--------------------------------------------------------------------------------------------------

    // character array or string: It is collection of characters

        Decl: syntax:

                char <ar_nm>[<index>];

                e.g.
                    char str[20];

                    str 0 1 2 3 4 .....                   ...19
                       [][][][][][][][][][][][][][][][][][][][]


    // Init and display the of character array:
    // ========================================

    char str[]={'h','e','l','l','o',' ','g','u','y','s','\0'};
        // Like the numeric array, index is optional


 int main()
 {
     char str[]={'h','e','l','l','o',' ','g','u','y','s','\0'};
     char ch[]="good evening all of you";

     int i;

     // display method 1
     for(i=0;str[i]!='\0';i++)
     {
         printf("%c",str[i]);
     }

     // display method 2
     printf("\n String is: %s",str); // %s is format specifier for string

     // display method 3
     printf("\n String is: ");
     puts(str); // it is built-in function used to display the string

     printf("\n Another String: %s",ch);
     return 0;
 }


//----------------------------------------------------------------------------

    // Input and display the string

    1. Using loop and the %c: Not the correct option

int main()
{
    char str[45];
    int i;

    printf("\n Enter any string: ");
    for(i=0;i<?????;i++)  // condition is the problem (i<?????)
    {
        scanf("%c",&str[i]);
    }

    printf("\n String is: %s",str);
    return 0;
}

//---------------------------------------------------------------

    2. Using %s as a format specifier in scanf(): for 1 word it is fine but for more words it will
                                                   consider the space as a string terminating character.


int main()
{
    char str[45];
    int i;

    printf("\n Enter any string: ");
    scanf("%s",&str);

    printf("\n String is: %s",str);
    return 0;
}
//
// output 1:
//
// Enter any string: hello
//
// String is: hello
//Process returned 0 (0x0)   execution time : 6.363 s
//Press any key to continue.
//
//output 2:
//
// Enter any string: how are you
//
// String is: how
//Process returned 0 (0x0)   execution time : 12.374 s
//Press any key to continue.

//---------------------------------------------------------------------------------------------


    3. using %[^\n] as a format specifier: it is working fine


int main()
{
    char str[45];
    int i;

    printf("\n Enter any string: ");
    scanf("%[^\n]",&str);

    printf("\n String is: %s",str);
    return 0;
}

//output 1:
//
// Enter any string: hello
//
// String is: hello
//Process returned 0 (0x0)   execution time : 5.432 s
//Press any key to continue.
//
//output 2:
//
// Enter any string: how are you?
//
// String is: how are you?
//Process returned 0 (0x0)   execution time : 12.877 s
//Press any key to continue.

         scanf("%[^\n]",&str);

        In this case, \n is defined as a string terminating character.
        you can define any other character as terminating also


int main()
{
    char str[45];
    int i;

    printf("\n Enter any string: ");
    scanf("%[^\nrw]",&str);

    printf("\n String is: %s",str);
    return 0;
}

//
//    output 1, with %[^\nr]
// Enter any string: how are you
//
// String is: how a
//Process returned 0 (0x0)   execution time : 7.979 s
//Press any key to continue.

//---------------------------------------------------------

//    output 2, with %[^\nrw]
//
// Enter any string: how are you?
//
// String is: ho
//Process returned 0 (0x0)   execution time : 8.107 s
//Press any key to continue.


//-------------------------------------------------------------------

    // 4. Using the gets(): It is built-in function recommended to input the string.
                            it will take the character by character input and place the null
                            character('\0') at the end.



int main()
{
    char str[45];
    int i;

    printf("\n Enter any string: ");
    gets(str);

    printf("\n String is: %s",str);
    return 0;
}

//------------------------------------------------------------------------------------

        // String processing

     // WAP to find the length of string (number of characters in it)

     str
        {'h','e','l','l','o',' ','a','l','l','\0'}

int main()
{
    char str[45];
    int i,cnt=0;

    printf("\n Enter any string: ");
    gets(str);

    for(i=0;str[i]!='\0';i++)
    {
        cnt++;
    }
    printf("\n String is: %s",str);
    printf("\n Length Of String: %d",cnt);
    return 0;
}
//----------------------------------------------------------------------

 // same program without cnt variable.

int main()
{
    char str[45];
    int i;

    printf("\n Enter any string: ");
    gets(str);

    for(i=0;str[i]!='\0';i++);

    printf("\n String is: %s",str);
    printf("\n Length Of String: %d",i);
    return 0;
}

//-------------------------------------------------------------------------------

    // WAP to convert the string into uppercase
*/

int main()
{
    // decl
    char str[45];
    int i;

    // input
    printf("\n Enter any string: ");
    gets(str);
    printf("\n Entered String is: %s",str);

    // process
    for(i=0;str[i]!='\0';i++)
    {
        if(str[i]>=97&&str[i]<=122)
        {
            str[i]=str[i]-32;
        }
    }

    // display
    printf("\n Uppercase String is: %s",str);
    return 0;
}
/---------------------------------------------------------------------




        // reverse copy

        str 0  1  2  3  4   5
           [h][e][l][l][o][\0][][][][][][][][][][][]

          t 0  1  2  3  4   5
           [h][e][l][l][o][\0][][][][][][][][][][][]


        ch 0  1  2  3  4   5
          [o][l][l][e][h][\0][][][][][][][][][][][][][]


int main()
{
    char str[50],ch[60],t[50];
    int i,j;

    printf("\n enter the string: ");
    gets(str);

    // copy
    for(i=0;str[i]!='\0';i++)
    {
        t[i]=str[i];
    }
    t[i]='\0';
    // reverse copy
    for(i=0;str[i]!='\0';i++);
    for(i--,j=0 ; i>=0 ; i--,j++ )
    {
        ch[j]=str[i];
    }
    ch[j]='\0';

    printf("\n Original String: %s",str);
    printf("\n copied String: %s",t);
    printf("\n reverse Copied String: %s",ch);

    return 0;
}
//--------------------------------------------------------------------

        // WAP To reverse the string at same location

        str 0  1  2  3  4  5  6  7  8  9
           [h][e][l][l][o][ ][a][l][l][\0][][][][][][][]    <------ Entered String

        str 0  1  2  3  4   5
           [l][l][a][ ][o][l][l][e][h][\0][][][][][][][][]  <-------- After Processing



int main()
{
    char str[40],tmp;
    int i,j;

    printf("\n Enter the string: ");
    gets(str);
    printf("\n String before processing: %s",str);

    for(j=0;str[j]!='\0';j++);
    for(i=0,j--; j>=i ; i++,j--)
    {
        tmp=str[i];
        str[i]=str[j];
        str[j]=tmp;
//        printf("\n %s",str);
//        getch();
    }
    printf("\n String after processing: %s",str);
    return 0;
}

//-------------------------------------------------------------------------------------------

    Same program using the stack (Application of stack)
**/

int main()
{
    char str[40],stack[40];
    int i,j,top;

    printf("\n Enter the string: ");
    gets(str);
    printf("\n String before processing: %s",str);

    // let's push all character from str to stack
    top=-1;
    i=0;
    while(str[i]!='\0')
    {
        top++;
        stack[top]=str[i];
        i++;
    }

    // Now pop all character and store in to str from start
    i=0;
    while(top>=0)
    {
        str[i]=stack[top];
        i++;
        top--;
    }
    printf("\n String after processing: %s",str);

    return 0;
}

//--------------------------------------------------------------------------

    WAP to display the starting character of each word from entered string.
    
        str --> hi all how are you
        output -> hahay



//--------------------------------------------------------------------------

    //  word count in a simple way. (without any unwanted spaces)

        str ---> hello good day to all

int main()
{
    char str[50];
    int i,cnt=0;

    printf("\n Enter the string: ");
    gets(str);

    for(i=0;str[i]!='\0';i++)
    {
        if(str[i]==32)
        {
            cnt++;
        }
    }
    printf("\n String is: %s \n Word Count: %d",str,cnt+1);
    return 0;
}

//---------------------------------------------------------------------------------------------

    WAP to display the starting character of each word from entered string and word count.
    (with multiple spaces)

                    4                            33
        str --> ----hi----all----how----are----you-----\0
                    |                            |
                    sp                          ep

        output -> hahay

int main()
{
    char str[50];
    int i,sp,ep,cnt;
    printf("\n Enter the string: ");
    gets(str);

    for(i=0;str[i]==32;i++);
    sp=i;

    for(i=0;str[i]!='\0';i++);
    for(i--;str[i]==32;i--);
    ep=i;

    cnt=0;
    printf("%c",str[sp]);
    while(sp<=ep)
    {
        if(str[sp]==32&&str[sp+1]!=32)
        {
            cnt++;
            printf("%c",str[sp+1]);
        }
        sp++;
    }
    printf("\n String is: %s",str);
    printf("\n word Count is: %d",cnt+1);

    return 0;
}
//--------------------------------------------------------------------------------------------------------

    // WAP to convert the string in to title case

        str ---> CPP is superset of c programming

        outut --> Cpp Is Superset Of C Programming

*/

int main()
{
    char str[40];
    int i,sp,ep;

    printf("\n Enter the string: ");
    gets(str);

    for(i=0;str[i]==32;i++);
    sp=i;

    for(i=0;str[i]!='\0';i++);
    for(i--;str[i]==32;i--);
    ep=i;

    while(sp<=ep)
    {
        if(str[sp]!=32&&str[sp-1]==32)
        {
            if(str[sp]>=97&&str[sp]<=122)
            {
                str[sp]=str[sp]-32;
            }
        }
        else if(str[sp]>=65&&str[sp]<=90)
        {
            str[sp]+=32;
        }
        sp++;
    }
    if(str[0]!=32 && (str[0]>=97&&str[0]<=122) )
    {
        str[0]=str[0]-32;
    }
    printf("\n Title case String: %s",str);

    return 0;
}


//------------------------------------------------------------

    // WAP to convert the first and last character of each word
    // from string to uppercase and all other characters to lowercase

        str ---> CPP is superset of c programming

        outut --> CpP IS SuperseT OF C ProgramminG


int main()
{
    char str[140];
    int i,sp,ep;

    printf("\n Enter the string: ");
    gets(str);

    for(i=0;str[i]==32;i++);
    sp=i;

    for(i=0;str[i]!='\0';i++);
    for(i--;str[i]==32;i--);
    ep=i;

    while(sp<=ep)
    {
        if((str[sp]!=32&&str[sp-1]==32)||(str[sp]!=32&&(str[sp+1]==32||str[sp+1]==0)))
        {
            if(str[sp]>=97&&str[sp]<=122)
            {
                str[sp]=str[sp]-32;
            }
        }
//        else if(str[sp]!=32&&(str[sp+1]==32||str[sp+1]==0))
//        {
//            if(str[sp]>=97&&str[sp]<=122)
//            {
//                str[sp]=str[sp]-32;
//            }
//        }
        else if(str[sp]>=65&&str[sp]<=90)
        {
            str[sp]+=32;
        }
        sp++;
    }
    if(str[0]!=32 && (str[0]>=97&&str[0]<=122) )
    {
        str[0]=str[0]-32;
    }
    printf("\n Title case String: %s",str);

    return 0;
}

//------------------------------------------------------------------------

    // WAP to interchanger first and last character of each word from string.

        str --> ---hello good evening abhijeet and prachi

        o/p --> oellh doog gvenine tbhijeea dna irachp



int main()
{
    char str[140],tmp;
    int i,j,sp,ep;

    printf("\n Enter the string: ");
    gets(str);

    printf("\n Entered String is: %s",str);
    i=0;
    while(str[i]!='\0')
    {
        for( ;str[i]==32;i++);

        for(j=i;(str[j]!=32&&str[j]!='\0') ;j++);

        tmp=str[i];
        str[i]=str[j-1];
        str[j-1]=tmp;

        i=j;
    }
    printf("\n Processed String is: %s",str);

    return 0;
}

//-----------------------------------------------------------------------

    // WAP To reverse the every word from sting at same location.

                          |
    str --> hello good evening abhijeet and prachi  (17+11)/2
                       |     |
 output --> olleh doog gnineve teejihba dna ohcarp



int main()
{
    char str[50],tmp;
    int i,j,t;

    printf("\n Enter the string: ");
    gets(str);

    i=0;
    while(str[i]!='\0')
    {
        for( ;str[i]==32;i++); // ignore all spaces at the end  i refers to 1st character in word.
        for(j=i; str[j+1]!=32&&str[j+1]!=0;j++); // now j refers to last character pos

        t=j+1;
        do
        {
            tmp=str[i];
            str[i]=str[j];
            str[j]=tmp;

            i++;
            j--;
        }while(i<=j);

        i=t;
    }
    printf("\n String is: %s",str);
    return 0;
}

//-----------------------------------------------------------------------------

**/

    // WAP to find the all lowercase missing alphabets from lowercase string.

int main()
{
    char str[40];
    int i,j,flg;
    printf("\n Enter the string: ");
    gets(str);
    printf("\n List of missing characters: ");
    for(i=97 ; i<=122 ; i++ )
    {
        flg=0;
        j=0;
        while(str[j]!='\0')
        {
            if(str[j]==i)
            {
                flg=1;
                break;
            }
            j++;
        }
        if(flg==0)
            printf("%c,",i);
    }
    printf("\b");
    return 0;
}

//--------------------------------------------------------------------------------

// sort the entered string


int main()
{
    char str[50], tmp;
    int i,j;

    printf("\n Enter the character array: ");
    gets(str);

    printf("\n String is: %s",str);

    for(i=0;str[i]!='\0';i++)
    {
        for(j=i+1;str[j]!='\0';j++)
        {
            if(str[j]<str[i])
            {
                tmp=str[i];
                str[i]=str[j];
                str[j]=tmp;
            }
        }
    }
    printf("\n Sorted String is: %s",str);
    return 0;
}

//------------------------------------------------------------------------------

    // WAP To Find The word with highest length from string

        e.g.

        str --> ----hello good day abhijeet and prachi

        word with max length: "abhijeet"
  **/
int main()
{
    char str[50],tmp[30];
    int i,j,len=0,cnt;

    printf("\n Enter the string: ");
    gets(str);

    i=0;
    do
    {
        for( ;str[i]==32;i++);
        cnt=0;
        for(j=i;str[j]!=32&&str[j]!='\0';j++)
        {
            cnt++;
        }

        if(cnt>len)
        {
            len=cnt;
            for(j=0 ;str[i]!=32&&str[i]!='\0';i++,j++)
            {
                tmp[j]=str[i];
            }
            tmp[j]='\0';
        }
        else
        {
            for(;str[i]!=32&&str[i]!='\0';i++);
        }
    }while(str[i]!='\0');
    printf("\n The word with max length: \"%s\" having length: %d",tmp,cnt);
    return 0;
}

//--------------------------------------------------------------------------------------------

	 // 2D Character Array:  it is collection of 1D character arrays.	


		char s[50];

			s
                         [][][][][][][][][][][][][][][][][][][][][][] --> space for 50 characters


		now we have to allocate the space for the multiple character arrays.


		Syntax:
			char <ar_nm>[<no_of_rows>][<no_of_cols/row>];

			e.g.

				char names[4][50];

	names ___________0_______________1__________________2_________________3________		
	      |	0  1 2..	| 0  1 2..	  |  0  1 2..       | 0  1 2..	      |
	      | [][][][][][][]  | [][][][][][][]  | [][][][][][][]  | [][][][][][][]  |
	      |_________________|_________________|_________________|_________________|	
		  

	can be represented in matrix form as..

		0 -> [][][][][][][][][][][][][][][][][][][][][][]
		1 -> [][][][][][][][][][][][][][][][][][][][][][]
		2 -> [][][][][][][][][][][][][][][][][][][][][][]
		3 -> [][][][][][][][][][][][][][][][][][][][][][]

//--------------------------------------------------------------------------------

	// Init and display 2D character array.
              str
		[a][m][i][t][\0][][][][][][][][][][][][][][][][][]
		[s][u][j][e][e][t][\0][][][][][][][][][][][][][][][]
		[d][i][v][y][a][\0][][][][][][][][][][][][][][][][]
		[s][h][i][v][\0][][][][][][][][][][][][][][][][][]


	// Init and display 2D character array.

int main()
{
	char str[4][50]={"amit","sujeet","divya","shiv"};
	int i;
	printf("\n List of elements: \n");
	for(i=0;i<4;i++)
    {
        puts(str[i]);
    }
    return 0;
}

//-------------------------------------------------------------------

	// Init and display 2D character array.

int main()
{
	char str[4][50];
	int i;
	printf("\n enter the name of 4 friends: ");
	for(i=0;i<4;i++)
    {
        gets(str[i]);
    }
	printf("\n List of elements: \n");
	for(i=0;i<4;i++)
    {
        puts(str[i]);
    }
    return 0;
}

//----------------------------------------------------------------------

       // WAP to search the name in the list of names

       names                                    nm
            [][][][][][][][][][][][][]            [][][][][][][][][][][][][]
            [][][][][][][][][][][][][]
            [][][][][][][][][][][][][]
            [][][][][][][][][][][][][]
     
int main()
{
	char names[7][50], nm[40];
	int i,j,k=0,flg,len1,len2;

	printf("\n enter the name of 7 friends: ");
	for(i=0;i<7;i++)
    {
        gets(names[i]);
    }

    printf("\n Enter the name to be searched: ");
    gets(nm);


    printf("\n List of Names: \n");
	for(i=0;i<7;i++)
    {
        puts(names[i]);
    }

    printf("\n Name to be searched: %s",nm);

    // searching
    for(j=0;nm[j]!='\0';j++);
    len1=j;

    for(i=0;i<7;i++)
    {
        for(j=0; names[i][j]!='\0';j++);
        len2=j;

        flg=0;
        if(len1==len2)
        {
           // printf("\n %d %s - %s",i,names[i],nm);
            for(j=0;j<len2;j++)
            {
                if(names[i][j]!=nm[j])
                {
                    flg=1;
                    break;
                }
            }
        }
        else
        {
            flg=1;
        }
        //printf("\n i=%d - flg=%d",i,flg);
        if(flg==0)
        {
            k++;
            printf("\n %s is present at %d position",nm,i+1);
        }
    }
    if(k==0)
    {
        printf("\n %s is not present in the list",nm);
    }
    return 0;
}

**/
//----------------------------------------------------------------------------------

    // WAP to arrange the strings in alphabetical order (sort strings lexicographically)

    // Entered strings 
    rina
    aurn
    amit
    rushikesh
    mukesh
    ritesh
    
    // lexicographically sorted
    amit
    arun
    mukesh
    rina
    ritesh
    rushikesh
    
    
    //----------------------------------------------------------------------------

    // N Dimensional Array: 
    
    If the x[i][j] is the 2D array and at th location
    instead of one element there is an array.
    
//==============================================================================
//====================== Pointer in C ==========================================
//==============================================================================

	we know the different data types

		data types -----> Built-in Types:      char, int, float, double
			     |--> Derived Types:       Array, Pointer, Function
			     |--> User defined Types:  Structure, ?Union, Enum


		The aim of any data type is to allocate the memory

		Built-in Types:      char, int, float, double

			i.e.
				int x;		float ft;		double db;

				x		ft		db
				[    ]		[    ]		[         ]

		
		Derived Types:       Array

			int x[10];

				x
				 [][][][][][][][][][][]


			pointer: 

				ptr_variable
				     [600] ---------> [][][][][][][][][][][]
						     600


		Decl. of Pointer Variable
			
			<data_type> *<ptr_variable>;

		int *p;        char *ch;	float *ft;	double *db;

	
		*p		*ch		*ft		*db			
		 [ ] 		  [ ]		  [ ]		  [ ]   <--- Every pointer variable need 8 bytes

	Every pointer needs 2 bytes in TurboC and 8 bytes in GCC.


int main()
{
    int *p;
    float *q;
    char *c;
    double *d;

    printf("\n *p: %u",sizeof(p));
    printf("\n *q: %u",sizeof(q));
    printf("\n *c: %u",sizeof(c));
    printf("\n *d: %u",sizeof(d));

    printf("\n int pointer: %u",sizeof(int*));
    printf("\n double pointer: %u",sizeof(double*));
    return 0;
}

-------- output ----------------

 *p: 8
 *q: 8
 *c: 8
 *d: 8
 int pointer: 8
 double pointer: 8

	
	WHY POINTER..?

		If you want to store the marks of 60 students then you have following options

			- Decl. 60 variables, float m1,m2,m3,...,m60;

			- decl. array of 60 i.e. float mrk[60]


		Now problem is changed, you have to store the marks of students present 
		@ tomommows lecture at 10 AM

			In short, You don't know the exact count.

		so go for highest possible size.

		(suppose 5 streams and 60 students/stream => 300)    

int main()
{
	float mrk[300];
	int i,cnt;

	printf("\n Enter the student count: ");
	scanf("%d",&cnt);

	printf("\n Enter the marks: ");
	for(i=0;i<cnt;i++)
	{
		scanf("%f",&mrk[i]);
	}

	printf("\n ------ marks ------ \n");
	for(i=0;i<cnt;i++)
	{
		printf("%9.2f",mrk[i]);
	}
	return 0;
}
    
	// Now here output is correct

  suppose, we allocated memory assuming 300 students will be there but only 10 students are present
  then you ave to input additional 290 values.

  This can be solved by using cnt variable.

  but it is inefficient use of memory. and it will not work when there are more than 300 students

	To allocated exact amount of memory AT RUNTIME some built-in functions are there, 
  which does not allows you to assignment an identifier to allocated location, but they returns
  base address of allocated location. TO STORE THAT ADDRESS SPECIAL TYPE OF VARIABLE NEEDED 
  CALLED POINTER.

	 so finally we have to check that if we know an address of location is it possible to
  access the value stored in that location.


	CHECK-1:

			int x=10;
			int *p;


			*p		x
			 [ 600 ] ---->  [ 10 ]
				      600

		Meaning of *
			- In Decl: It will indicate decleared variable is a pointer variable
			- In expression(rather than decl):  Just replace the * with "Value at address"

			means 
				*p  --> value at address p
				    ----> value at address 600
				    -----> 10
int main()
{
	int x=10;
	int *p;
	
	p=&x;

	printf("\n Address of x: %u \t Value of x: %d",&x,x);
	printf("\n\n Address of p: %u \t value of p: %u",&p,p);

	printf("\n Value of x using p: %d",*p);

	return 0;
}

------------- output -----------------
Address of x: 6422044   Value of x: 10

 Address of p: 6422032   value of p: 6422044
 Value of x using p: 10


	After observing the output, we can say that, If we get an address of location then it is possible to access
	value stored in that location.

//-------------------------------------------------------------------------------------------------------------------------



      **q		*p		x
	[ 900 ] ------>  [ 600 ] ---->  [ 10 ]
      1200		900	      600

		
				*p  --> value at address p
				    ----> value at address 600
				    -----> 10

				*q  --> value at address q
				    ----> value at address 900
				    -----> 600

				**q --> *(*q)
				    ---> value at address 600
				    ----> 10
int main()
{
	int x=10;
	int *p;  // pointer to int value
	int **q; // pointer to integer pointer
	
	p=&x;
	q=&p;

	printf("\n Address of x: %u \t Value of x: %d",&x,x);

	printf("\n\n Address of p: %u \t value of p: %u",&p,p);
	printf("\n Value of x using p: %d",*p);

	printf("\n Using q: Value of q( address of p): %u \t value of p: %u \n value of x using q", q, *q, **q);

	return 0;
}

---- Output ----

 Address of x: 6422036   Value of x: 10

 Address of p: 6422024   value of p: 6422036
 Value of x using p: 10

 Using q: Value of q( address of p): 6422024     value of p: 6422036
 value of x using q: 10


	After observing the output, we can say that, If we get an address of location then it is possible to access
	value stored in that location.

//========================================================================================================================

	CHECK - 2:  consider the given array

		int x[]={12,45,78,95,34};

                             0      1       2       3       4
	*p		x ___0_______1______2________3_____4____
			  |	|	|	|	|      |
	 [ 700 ] ----->   | 12 	|  45	|  78	|  95	|  34  |
			  |_____|_______|_______|_______|______|
			700     704    708    712     716

		NOTE:
		   	- x[i] gives the value at ith location
			- &x[i] gives the address of ith location

			- The array name x gives the base address of array <--> &x[0];


			(p+i) --> Address of ith location
			*(p+i) --> value at ith location.


int main()
{
	int x[]={12,45,78,95,34};
	int i;
	int *p;

	p=x;	// p=&x[0];

	printf("\n Elements are: ");
	for(i=0;i<5;i++)
	{
		printf("%5d", *(p+i) );
	}

	return 0;
}

 ------ Output ----------------

 Elements are:    12   45   78   95   34


	After observing the output, we can say that, If we get an address of location then it is possible to access
	value stored in that location.

		if (p+i) gives the address the we can use it at the time of input.

		lets see,

int main()
{
	int x[5];
	int i;
	int *p;

	p=x;	// p=&x[0];

	printf("\n Enter 5 Elements: ");
	for(i=0;i<5;i++)
	{
		scanf("%d", (p+i) );
	}

	printf("\n Elements are: ");
	for(i=0;i<5;i++)
	{
		printf("%5d", *(p+i) );
	}

	return 0;
}

-------------------- output ------------------------
 Enter 5 Elements: 12
23
34
45
56

 Elements are:    12   23   34   45   56

	After observing the output, we can say that, If we get an address of location then it is possible to access
	value stored in that location.

		Note:
	
			x[i] <---> *(p+i)

			&x[i] <--> (p+i)	

 //-----------------------------------------------------------------------------------------------------------------------

	// Dynamic Memory allocation Using malloc():

		malloc() is built-in function, defined in stdlib.h/alloc.h, used to allocate the memory at runtime.

		syntax:
			void* malloc(<size_in_bytes>);

		In will allocate the block the of mentioned bytes, and will gives the base address in return;

			e.g.

				int *p;
				p=(int*)malloc(40);

				*p		     0        1        2        3       4	
				[ 500 ] -------> [][][][] [][][][] [][][][] [][][][] [][][][]...... 
					       500	   Block of 40 bytes


int main()
{
	int *p,cnt;

	printf("\n Enter the element count: ");
	scanf("%d",&cnt);

	p=(int*)malloc(cnt*sizeof(int));	

	printf("\n Enter the %d Nos: ",cnt);
	for(i=0;i<cnt;i++)
	{
		scanf("%d",(p+i));	
	}

	printf("\n Elements are: ");
	for(i=0;i<cnt;i++)
	{
		printf("%5d",*(p+i));
	}

	return 0;
}

//----------------------------------------------------------------------------

    // Enter the N numbers and copy the elements into another location

        *p                0     1     2     3     4
         [ 1200 ] ----> [123] [567] [921] [799] [110]
                       1200         (20 bytes)

        *q                0     1     2     3     4
         [ 1300 ] ----> [123] [567] [921] [799] [110]
                       1300         (20 bytes)

int main()
{
    int *p,*q,cnt,i;

    printf("\n Enter the count: ");
    scanf("%d",&cnt);

    p=(int*)malloc(cnt*sizeof(int));

    printf("\n enter the %d elements: ",cnt);
    for(i=0;i<cnt;i++)
    {
        scanf("%d",(p+i));
    }

    q=(int*)malloc(cnt*sizeof(int));
    for(i=0;i<cnt;i++)
    {
        *(q+i)=*(p+i);
    }

    printf("\n Entered Elements: ");
    for(i=0;i<cnt;i++)
    {
        printf("%6d",*(p+i));
    }

    printf("\n Copied Elements: ");
    for(i=0;i<cnt;i++)
    {
        printf("%6d",*(q+i));
    }
    return 0;
}

//----------------------------------------------------------------------------------------

    //  Enter the N numbers and count even

int main()
{
    // decl
    int *p,cnt,i,ec;

    printf("\n Enter the count: ");
    scanf("%d",&cnt);

    p=(int*)malloc(cnt*sizeof(int));

    // input
    printf("\n enter the %d elements: ",cnt);
    for(i=0;i<cnt;i++)
    {
        scanf("%d",(p+i));
    }

    // process
    ec=0;
    for(i=0;i<cnt;i++)
    {
        if(*(p+i)%2==0)
        {
            ec++;
        }
    }

    // display
    printf("\n Elements are: ");
    for(i=0;i<cnt;i++)
    {
        printf("%6d",*(p+i));
    }
    printf("\n Even count is: %d",ec);

    return 0;
}
//-----------------------------------------------------------------------------------------

    // Enter the N nos and display all primes
*/

int main()
{
    int *p,cnt,i,flg,d;

    printf("\n Enter the count: ");
    scanf("%d",&cnt);

    p=(int*)malloc(cnt*sizeof(int));

    printf("\n enter the %d elements: ",cnt);
    for(i=0;i<cnt;i++)
    {
        scanf("%d",(p+i));
    }

    printf("\n Prime list: ");
    for(i=0;i<cnt;i++)
    {
        flg=0;
        d=2;
        while(d<=*(p+i)/2)
        {
            if(*(p+i)%d==0)
            {
                flg=1;
                break;
            }
            d++;
        }
        if(flg==0)
        {
            printf("%6d",*(p+i));
        }

    }

    printf("\n Entered Elements are: ");
    for(i=0;i<cnt;i++)
    {
        printf("%6d",*(p+i));
    }

    return 0;
}

--------- output -----------------

 Prime list:     23    67    89
 Entered Elements are:     12    23    34    45    56    67    78    89


    // sort the collection

        *p
        [ 200 ] ---->[][][][][][][][][][]..
                    200

int main()
{
    int *p,cnt,i,j,tmp;

    printf("\n Enter the count: ");
    scanf("%d",&cnt);
    p=(int*)malloc(cnt*sizeof(int));

    printf("\n Enter the %d Nos: ",cnt);
    for(i=0;i<cnt;i++)
    {
        scanf("%d",(p+i));
    }

    printf("\n Before Sort: ");
    for(i=0;i<cnt;i++)
    {                                 //              cnt=5
        printf("%6d",*(p+i));         //       0    1    2    3    4
    }                                 //      55   44   33   22   11

    // Sorting

    for(i=0;i<cnt-1;i++)
    {
        for(j=i+1;j<cnt;j++)
        {
            if(*(p+j)<*(p+i))
            {
                tmp=*(p+i);
                *(p+i)=*(p+j);
                *(p+j)=tmp;
            }
        }
    }
    printf("\n After Sort: ");
    for(i=0;i<cnt;i++)
    {
        printf("%6d",*(p+i));
    }
    return 0;
}

//-------------------------------------------------------------------------

    // search the number

**/

int main()
{
    int *p,cnt,i,j,no;

    printf("\n Enter the count: ");
    scanf("%d",&cnt);
    p=(int*)malloc(cnt*sizeof(int));

    printf("\n Enter the %d Nos: ",cnt);
    for(i=0;i<cnt;i++)
    {
        scanf("%d",(p+i));
    }

    printf("\n Enter number to be searched: ");
    scanf("%d",&no);

    printf("\n Elements are: ");
    for(i=0;i<cnt;i++)
    {
        printf("%6d",*(p+i));
    }

    for(i=0;i<cnt;i++)
    {
        if(no==*(p+i))
        {
            break;
        }
    }

    if(i<cnt)
    {
        printf("\n %d is present at %d position",no,i);
    }
    else
    {
        printf("\n %d is absent",no);
    }
    return 0;
}

//---------------------------------------------------------------------------

    // WAP to find the highest score by the player in n Matches

        *m
         [400] ----> [][][][][][][][]...N
                    400


int main()
{
    int *m, mcnt, i, pos, hr;
    printf("\n Enter the match count: ");
    scanf("%d",&mcnt);
    m=(int*)malloc(mcnt*sizeof(int));

    printf("\n Enter the runs scored by player: ");
    for(i=0;i<mcnt;i++)
    {
        printf("\n Match %d: ",i+1);
        scanf("%d",(m+i));
    }

    hr=0;
    for(i=0;i<mcnt;i++)
    {
        if(*(m+i)>hr)
        {
            hr=*(m+i);
            pos=i;
        }
    }

    printf("\n runs Scored by player in different matches \n");
    for(i=0;i<mcnt;i++)
    {
        printf("\t match %d: %d",i+1,*(m+i));
    }

    printf("\n Highest Runs %d in Match %d",hr,pos+1);
    return 0;
}

//---------------------------------------------------------------------------

    // WAP to find out total bill, discount and payable amount.

      (There are N items and discount 5% till bill less than 500 otherwise 14%)

      *p
       [ 500 ] -----> [][][][][][][][][][]...ic
**/

int main()
{
    float *p,tot=0.0,dis;
    int ic,i;

    printf("\n Enter the item count: ");
    scanf("%d",&ic);

    p=(float*)malloc(ic*sizeof(float));
    printf("\n Enter the price of %d items: ");
    for(i=0;i<ic;i++)
    {
        scanf("%f",(p+i));
        tot=tot+ *(p+i);
    }

    if(tot<=500)
    {
        dis=tot*0.05;
    }
    else
    {
        dis=tot*0.14;
    }

    printf("\n price list \n");
    for(i=0;i<ic;i++)
    {
        printf("Item %d: %0.2f \t",i+1,*(p+i));
    }

    printf("\n Total bill: %0.2f",tot);
    printf("\n Discount: %0.2f",dis);
    printf("\n Pay Rs. %0.2f",(tot-dis));

    return 0;
}

//------------------------------------------------------------------------------------

    // Write a same program for 4 buyers

	// Using the Array of pointers

            *p[4]   0     1    2    3                  [2] [5] [] []
                  [400] [500] [  ] [  ]
                1200

                  [][]
                 400
                                    [][][][][]
                                   500
 **/
int main()
{
    float *p[4],tot,dis;
    int i, j, ic[4];

    for(i=0;i<4;i++)
    {
        printf("\n Enter the item count of %d buyer: ",i+1);
        scanf("%d",&ic[i]);

        p[i]=(float*)malloc(ic[i]*sizeof(float));

        printf("\n Enter the price of %d items: ",ic[i]);
        for(j=0;j<ic[i];j++)
        {
            scanf("%f",*(p+i)+j);
        }
    }

    printf("\n List of Items with price \n");
    for(i=0;i<4;i++)
    {
        tot=0.0;
        dis=0.0;
        printf("\n Buyer %d: ",i+1);
        for(j=0;j<ic[i];j++)
        {
            printf("  %7.2f",*(*(p+i)+j));
            tot=tot + *(*(p+i)+j);
        }
        if(tot<500)
            dis=tot*0.05;
        else
            dis=tot*0.14;

        printf("\t total bill: %0.2f \t Discount: %0.2f \t Pay Rs: %0.2f",tot,dis,(tot-dis));
    }
    return 0;
}

//-----------------------------------------------------------------------------------

        // WAP to display runs scored by 3 different players in N matches
        //  ( N may be different for each player )

        *p1                                 int *p[3]
         [] ----> [][][]
                                 |                                  mat
        *p2                      |    *p[3]                          [3][5][2]
         [] ----> [][][][][]     |        [800] [400] [900]
                                 |      1500
        *p3                      |              [][][][][]
         [] ----> [][]               [][][]    400                  [][]
                                    800                            900



int main()
{
    int *p[3],mat[3],i,j;

    printf("\n Enter the runs scored by 3 players in different matches: ");
    for(i=0;i<3;i++)
    {
        printf("\n Player %d: \n",i+1);
        printf("\n the the match count: ");
        scanf("%d",&mat[i]);
        p[i]=(int*)malloc(mat[i]*sizeof(int));
        printf("\n Enter the runs scored in %d matches",mat[i]);
        for(j=0;j<mat[i];j++)
        {
            printf("\n Match %d: ",j+1);
            scanf("%d",*(p+i)+j);
        }
    }

    printf("\n score card \n");
    for(i=0;i<3;i++)
    {
        printf("\n Player %d: ",i+1);
        for(j=0;j<mat[i];j++)
        {
            printf("\t Match %d: ",j+1);
            printf("%6d",*(*(p+i)+j));
        }
    }
    return 0;
}

//--------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------

    // HOMEWORK PROBLEM:

    // Enter the marks of 5 students in N subjects (N may be different for each student)

//=================================================================================================
//=================================================================================================

            // ENTER THE MARKS OF N STUDENTS IN 3 SUBJECTS

            *p                                              cnt
              [1200] ----> [500] [800] [900] [200] [850]      [ 5 ]
                         1200

                [][][]    [][][]     [][][]     [][][]    [][][]
               500       800        900        200       850

int main()
{
    int (*p)[3];
    int cnt,i,j;

    printf("\n Enter the student count: ");
    scanf("%d",&cnt);

    p=(int(*)[])malloc(cnt*(3*sizeof(int)));

    printf("\n Enter the marks of %d students in 3 subjects \n",cnt);
    for(i=0;i<cnt;i++)
    {
        printf("\n For Student %d ",i+1);
        for(j=0;j<3;j++)
        {
            printf("\n Sub %d: ",j+1);
            scanf("%d",*(p+i)+j);
        }
    }

    printf("\n Marks of %d students in 3 subjects \n",cnt);
    for(i=0;i<cnt;i++)
    {
        printf("\n Student %d: ",i+1);
        for(j=0;j<3;j++)
        {
            printf("%6d",*(*(p+i)+j));
        }
    }
    return 0;
}

//-----------------------------------------------------------------------

    // There are N student and M subjects ( M may be different for every student )

       stdcnt
         [ 4 ]
                                    *sub
                                    [1400] -----> [5][3][][]
         **p                                      1400
         [1200] -----> [450][550][][]
                     1200

                     [][][][][]         [][][]
                    450                550
**/
int main()
{
   int**p, *sub;
   int i,j,stdcnt;

   printf("\n Enter the student count: ");
   scanf("%d",&stdcnt);

   p=(int**)malloc(stdcnt*sizeof(int*));
   sub=(int*)malloc(stdcnt*sizeof(int));

   for(i=0;i<stdcnt;i++)
   {
       printf("\n Enter the subject count of student %d: ",i+1);
       scanf("%d",(sub+i));
       *(p+i)=(int*)malloc(*(sub+i)*sizeof(int));
       printf("\n Enter the marks in %d subjects",*(sub+i));
       for(j=0;j<*(sub+i);j++)
       {
           printf("\n Sub %d: ",j+1);
           scanf("%d",*(p+i)+j);
       }
   }

   printf("\n Student List With Marks \n");
   for(i=0;i<stdcnt;i++)
   {
       printf("\n Student %d: ",i+1);
       for(j=0;j<*(sub+i);j++)
       {
           printf("%6d",*(*(p+i)+j));
       }
   }
   return 0;
}


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

        // 3 students and 4 subjects

        Option is: 2D Array

        [][][][]  for 0th student
        [][][][]  for 1st student
        [][][][]  for 2nd student


int main()
{
    int s[3][4],i,j;

    printf("\n enter the marks of 3 students in 4 subjects");
    for(i=0;i<3;i++)
    {
        printf("\n Student %d: ",i+1);
        for(j=0;j<4;j++)
        {
            scanf("%d",&s[i][j]);
        }
    }

    printf("\n Student Details \n");
    for(i=0;i<3;i++)
    {
        printf("\n Student %d: ",i+1);
        for(j=0;j<4;j++)
        {
            printf("%6d",s[i][j]);
        }
    }
    return 0;
}


    Note carefully that,

            *(s+i)+j  <----> &s[i][j]

            *(*(s+i)+j)  <----> s[i][j]

    so above program can be written as,


  // In Another Words "2D Array Access Using Pointer Notation"



int main()
{
    int s[3][4],i,j;

    printf("\n enter the marks of 3 students in 4 subjects");
    for(i=0;i<3;i++)
    {
        printf("\n Student %d: ",i+1);
        for(j=0;j<4;j++)
        {
            scanf("%d",*(s+i)+j);
        }
    }

    printf("\n Student Details \n");
    for(i=0;i<3;i++)
    {
        printf("\n Student %d: ",i+1);
        for(j=0;j<4;j++)
        {
            printf("%6d",*(*(s+i)+j));
        }
    }
    return 0;
}

//-----------------------------------------------------------------------------

        // 3 students and N subjects --> Array of Pointers

            *p[3]                                   sub[3]
              [400][900][500]                         [5][3][2]


                       [11][22][33][44][55]         [90][100]
    [45][56][67]      400                          500
  900


int main()
{
    int *p[3];
    int i,j,sub[3];

    for(i=0;i<3;i++)
    {
        printf("\n enter the subject count of %d student",i+1);
        scanf("%d",&sub[i]);
        p[i]=(int*)malloc(sub[i]*sizeof(int));
        printf("\n enter the marks of %d student in %d subjects: ",i+1,sub[i]);
        for(j=0;j<sub[i];j++)
        {
            scanf("%d",*(p+i)+j);
        }
    }
    printf("\n ---- Student List ---- \n");
    for(i=0;i<3;i++)
    {
        printf("\n student %d: ",i+1);
        for(j=0;j<sub[i];j++)
        {
            printf("%6d",*(*(p+i)+j));
        }
    }
    return 0;
}


//-----------------------------------------------------------------------------

        // N students and 3 subjects --> Block Pointer

        *p
        [] ------> [ ][ ][ ][ ][ ] .....
                    |  |  |  |  |
                    |
                    V
                    [][][]


int main()
{
    int (*p)[3];
    int i,j,scnt;

    printf("\n Enter the student count: ");
    scanf("%d",&scnt);

    p=(int(*)[])malloc(scnt*3*sizeof(int));

    printf("\n enter the marks of %d students in 3 subjects",scnt);
    for(i=0;i<scnt;i++)
    {
        printf("\n Student %d: ",i+1);
        for(j=0;j<3;j++)
        {
            scanf("%d",*(p+i)+j);
        }
    }

    printf("\n Student Details \n");
    for(i=0;i<scnt;i++)
    {
        printf("\n Student %d: ",i+1);
        for(j=0;j<3;j++)
        {
            printf("%6d",*(*(p+i)+j));
        }
    }
    return 0;
}

//-----------------------------------------------------------------------------

        // N students and M subjects --> pointer to pointer

        **p                                     *sub
        [] ------> [ ][ ][ ][ ][ ] .....           [ ]---> [][][][]....
                    |  |  |  |  |
                    |
                    V
                    [][][][]...




int main()
{
    int**p, *sub;
    int i,j,scnt;

    printf("\n Enter the student count: ");
    scanf("%d",&scnt);

    p=(int**)malloc(scnt*sizeof(int*));
    sub=(int*)malloc(scnt*sizeof(int));

    for(i=0;i<scnt;i++)
    {
        printf("\n enter the subject count of %d student",i+1);
        scanf("%d",(sub+i));
        p[i]=(int*)malloc(sub[i]*sizeof(int));
        printf("\n enter the marks of %d student in %d subjects: ",i+1,sub[i]);
        for(j=0;j<*(sub+i);j++)
        {
            scanf("%d",*(p+i)+j);
        }
    }
    printf("\n ---- Student List ---- \n");
    for(i=0;i<scnt;i++)
    {
        printf("\n student %d: ",i+1);
        for(j=0;j<*(sub+i);j++)
        {
            printf("%6d",*(*(p+i)+j));
        }
    }
    return 0;
}

//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------


		///  TYPES OF POINTER:

	- Null pointer: 

		Normally we decl the pointer as 

			int *p; 

			*p
                        [ ] ---> ....     

		By default it is pointing towards the random location.
		to avoid this if we decl same as 

			int *p=NULL;
		
		here NULL is constant decl. in stdio.h. and the pointer pointing
		towards nothing

	We can create a null pointer by assigning null value during the pointer declaration. 
	This method is useful when you do not have any address assigned to the pointer. A null pointer 	always contains value 0.

	- void pointer/generic pointer: 
		A void pointer is also called as a generic pointer which is convertable to any type.
 		It does not have any standard data type. A void pointer is created by using the
 		keyword void. It can be used to store an address of any variable.

#include <stdio.h>
int main()
{
    void *p = NULL; 	//void pointer
    int x=10;
    double db=34.45;

    printf("The size of pointer is:%d\n",sizeof(p));

    p=&x;
    printf("\n value of x is: %d",*(int*)p);

    p=&db;
    printf("\n value of db is: %lf",*(double*)p);
    return 0;
}


	- wild pointer:
		A pointer is said to be a wild pointer if it is not being initialized to anything.
	 	These types of C pointers are not efficient because they may point to some unknown
 		memory location which may cause problems in our program and it may lead to crashing 
		of the program. One should always be careful while working with wild pointers.

#include <stdio.h>
int main()
{
	int *p; 	//wild pointer
	printf("\n%d",*p);
	return 0;
}

	- Dangling pointer:
		It is pointer refering towards the deallocated/deleted/dereferenced location.
		Dangling pointer occurs at the time of the object destruction when the object is
		deleted or de-allocated from memory without modifying the value of the pointer. 
			
int main()
{
    int *p,cnt,i;

	printf("\n Enter the element count: ");
	scanf("%d",&cnt);

	p=(int*)malloc(cnt*sizeof(int));      // allocates the memory for pointer

	printf("\n Enter the %d Nos: ",cnt);
	for(i=0;i<cnt;i++)
	{
		scanf("%d",(p+i));
	}

	printf("\n Elements are: ");
	for(i=0;i<cnt;i++)
	{
		printf("%5d",*(p+i));
	}
        free(p);    // Releases the allocated location, 
                // After the releasing pointer becomes the Dangling pointer.
	return 0;
}
	- Complex pointer: 
		This is not a simple decl. It is quite complicated therefore it is known as
		complex pointer
			e.g. void (*ptr)(int (*)[2],int (*) void))


	Before knowing how to read complex pointers then you should first know associativity 		and precedence.

	Associativity: Order operators of equal precedence within an expression are employed.

	Precedence: Operator precedence describes the order in which C reads expressions.


	Operator		Precedence			Associative

	(),[]			  1			    Left to Right

	*,Identifier		  2			    Right to Left

	Data Type		  3				–

(): this operator is used to declare and define the function.
[]: this is an array subscript operator.
*: this is a pointer operator.
Identifier: this is the name of a pointer.
Data type: this is the type of variable.  


		Reading the complex pointer

			e.g.
				char (*ptr)[3];  // block pointer
				
				void (*ptr)(int (*)[2],int (*) void))

				double*(*(*ptr)(int))(double **,char c)

		
	- Near pointer
		Near pointer means a pointer that is utilized to bit address of up to 16 bits within 
		a given section of that computer memory which is 16 bit enabled.

		It can only access data of the small size of about 64 kb within a given period, 
		which is the main disadvantage of this type of pointer.
			e.g.
				 int near *ptr;

	- Far pointer
		A far pointer is typically 32 bit which can access memory outside that current 
		segment. To utilize the far pointer, the compiler allows a segment register to 
		save segment address, then another register to save offset inside the 
		current segment.
			e.g.
				 int far *ptr;

	- Huge pointr

		Same as far pointer huge pointer is also typically 32 bit which can access outside 
		the segment. A far pointer that is fixed and hence that part of that sector within
 		which they are located cannot be changed in any way; huge pointers can be.
			e.g.
				 char huge *far *a;

*/
//----------------------------------------------------------

Direct and Indirect Access Pointers: 

In C, there are two equivalent ways to access and manipulate a variable content

Direct access: we use directly the variable name
Indirect access: we use a pointer to the variable


//----------------------------------------------------------------------

    *p               x
      [ 700 ] ----->  [11] [22] [33] [44] [55]
                    700
*/
int main()
{
    int x[]={11,22,33,44,55};
    int *p, i;

    printf("\n Direct 1 - values are: ");
    for(i=0;i<5;i++)
    {
        printf("%5d",x[i]);
    }

    printf("\n Direct 2 - values are: ");
    for(i=0;i<5;i++)
    {
        printf("%5d",*(x+i));
    }

    p=&x[0];
    printf("\n In-Direct - values are: ");
    for(i=0;i<5;i++)
    {
        printf("%5d",*(p+i));
    }
    return 0;
}

//-------------------------------------------------------------------------------------------------------------

	Pointer Arithmetic:
	
		*p			   0      1     2      3       4 
		[ 300 ] --------------> [ 23 ] [ 45 ] [ 77 ] [ 92 ] [ 453 ]
				       300	

int main()
{
	int *p,*q,cnt;

	printf("\n Enter the count: ");
	scanf("%d",&cnt);

	p=(int*)malloc(cnt*sizeof(int));
	q=p;
	printf("\n Enter the %d nos: ",cnt);
	for(i=0;i<cnt;i++)
	{
		scanf("%d",p++);
	}

	p=q;
	printf("\n Enter the %d nos: ",cnt);
	for(i=0;i<cnt;i++)
	{
		printf("%6d",*p++);
	}
	return 0;
}

//---------------------------------------------------------------------------------------------------------------

	// Using the calloc(): It is same as the malloc(), only difference that
				- init. the all blocks to 0 bydefault
			        - Take two parameters i.e. element count and element size

		syntax:
	
			ptr=(cast*)calloc(cnt,emement_size);


int main()
{
	int *p,cnt,i;

	printf("\n Enter the count: ");
	scanf("%d",&cnt);

	p=(int*)calloc(cnt,sizeof(int));
    	printf("\n nos: ");
	for(i=0;i<cnt;i++)
	{
		printf("%6d",*(p+i));
	}
	printf("\n Enter the %d nos: ",cnt);
	for(i=0;i<cnt;i++)
	{
		scanf("%d",(p+i));
	}

	printf("\n nos: ");
	for(i=0;i<cnt;i++)
	{
		printf("%6d",*(p+i));
	}
	free(p);
	return 0;
}


//---------------------------------------------------------------------------------------------------------------

	Using realloc(): It refers reallocation, It is used to change the size of currently allocated block, for which
			 malloc() or calloc() is used. In the reallocation current memory block extended or if it is not possible
			 then it will allocate the new block and maintain the previous values. default values are the
			 garbage values.

				p=realloc(p,new_size);


int main()
{
	int *p,cnt,i;

	printf("\n Enter the count: ");
	scanf("%d",&cnt);

	p=(int*)calloc(cnt,sizeof(int));
	printf("\n Enter the %d nos: ",cnt);
	for(i=0;i<cnt;i++)
	{
		scanf("%d",(p+i));
	}

	printf("\n nos: ");
	for(i=0;i<cnt;i++)
	{
		printf("%6d",*(p+i));
	}
	i=cnt;

	printf("\n Enter the New Count: ");
	scanf("%d",&cnt);
	p=realloc(p,cnt*sizeof(int));
	printf("\n Enter the %d nos: ",cnt-i);
	for( ;i<cnt;i++)
	{
		scanf("%d",(p+i));
	}
	printf("\n Now nos: ");
	for(i=0;i<cnt;i++)
	{
		printf("%6d",*(p+i));
	}
	return 0;
}

//================================================================================================
//========================================== Function ============================================
//================================================================================================

	Why Function?

		instructions ==> when we want to reexecuter the block we used loops ====>> when the code
				 or a block of code is present nounber of times in the program and not in 
				 a conti. manner ==>>> function.

	We know that the loops are used to avoid the repetition code in conti. manner, but loops unable avoid 
	the repetitions occored at discrite instance or in the different program.


	int main()					void main()
	{						{
		-----------------;				-----------------;
								for()/while()/ do While()
		-----------------; $$$				{
		-----------------;					-----------------;
									-----------------;
		-----------------; $$$	===>>>			}
		-----------------;				-----------------;
								-----------------;
		-----------------; $$$				-----------------;
		-----------------;			}

		-----------------; $$$
		-----------------;

		-----------------;
		-----------------;
		-----------------;
		
	}


	int main()					prog1			pro2			prog3
	{
		-----------------;			int main()		int main()		int main()
		-----------------;			{			{			{
		-----------------;			  ......;		   ......;		   .....;	
							  ------------;$$$	   ------------;$$$        ------------;$$$ 
		-----------------; $$$			  ------------; 	   ------------; 	   ------------; 
		-----------------;			  ......;		   ..;			   ...........;
							}			}			}
		-----------------;

		-----------------; $$$
		-----------------;				In the both case, you have to avoid the code repetition.

		-----------------;
		-----------------;					ONLY WAY ===>>>> FUNCTION
		-----------------;

		-----------------; $$$
		-----------------;

		-----------------;
		-----------------;
		-----------------;
		
	}
		
	The functions are used to attend the next level of reusability 

		code rep. in program ------> if Conti.rep ==> Use Loops
					|
					|---> conti./ discrite rep ===> function

	FUNCTION Def: It is the group of instructions, designed/ written to perform the specific task.

	How To Write a Function?
	
		There are three different steps
			
		 - Decl.: To inform to the compiler.
			syntax:
			   <ret_type> <fun_nm>(<argu_if_any>);			

		 - Calling: To Use the function/ execute the code
			syntax:
			   <fun_nm>(<argu_if_any>);			

		 - Def: Actual set of instructions
			syntax:
			   <ret_type> <fun_nm>(<argu_if_any>)
			   {
				--------------;
				--------------;
				--------------;
				--------------;
				--------------;
			  }
			

	// WAP to display the message multiple times using the function.


void msg(); // Decl
int main()
{
	printf("\n Main start");
	msg(); // P-R // Call
	//...
	msg(); // P-R // Call
	//........
	msg(); // P-R // Call
	printf("\n Main end");
}
void msg() // Def
{
	printf("\n Wash Your Hands");
}

 // How Function Works?

void mumbai();
void kolhapur();
void pune();
int main()
{
	printf("\n The main() starts");

	pune();
	printf("\n In main Back From Pune");

	mumbai();
	printf("\n In main Back from Kolhapur");

	printf("\n The main() ends");
	return 0;
}	
void mumbai()
{
	printf("\n I am in mumbai");
	kolhapur();
	printf("\n back to mumbai from kolhapur");
}
void kolhapur()
{
	printf("\n I am in kolhapur");
}	
void pune()
{
	printf("\n I am in Pune");
}


	// Called Function: The function recives the call known as called function.

	// Calling Function: The function makes the call known as the calling function


	You can decl the all the functions in the body of main() orany other function, in such case you have to
	make calls from that function only.

int main()
{
    void mumbai();
    void kolhapur();
    void pune();

	printf("\n The main() starts");

	pune();
	printf("\n In main Back From Pune");

	mumbai();
	printf("\n In main Back from Kolhapur");

	printf("\n The main() ends");
	return 0;
}
void mumbai()
{
	printf("\n I am in mumbai");
	kolhapur();
	printf("\n back to mumbai from kolhapur");
}
void kolhapur()
{
	printf("\n I am in kolhapur");
}
void pune()
{
	printf("\n I am in Pune");
}

// It will gives the error indication the incorrect call to kolhapur().

//-----------------------------------------------------------------------------------------------------------------

	// Different Types Of Functions

			Function
			   |
		---------------------------------------
		|				      |
	    User-Defined			   Built-in
	       |				       |
  -----------------------------	 	        -----------------------------------------------------------------
  |	|	|	|      |		|		|		|		|		|
  I    II      III     IV      V             Math related     Graphics        IO related      String related  .....
					       math.h	     graphics.h     stdio.h/conio.h	String.h


 - Built-in: These fuctions are provided with the compiler. Any language consists of Editor, Compiler, Library, 
	     documentation and more..., All built-in functions are the part of library. and the are grouped together
	     into header files.

 - User-Defined Functions: These functions are defined by the user of language.(programmer)
			    There are following types of UDF

			I] simple function (function without argument without return type)
			II] function with argument without return type
			III] function without argument with return type
			IV] function with argument with return type	
			V] Recursion
	      

	Consider the simple program

int main()
{
	int a,b,c;

	printf("\n Enter two nos: ");
	scanf("%d %d",&a,&b);

	c=a+b;
	
	printf("\n Addition is: %d",c);

	return 0;
}


I] simple function (function without argument without return type)

    Note:
        - Variable Decl. in a scope is valid with in it.
            (the life and scope of variable limited within the function
             in which it is declared)

        - A program may contain two or more variable with same name but they
          must be within different functions.

        - Compiler always start the execution from main() and It will execute all
          the instructions from main(). If program having some another function
          defined in it, only those functions are executed who receives the call
          from main(). and these functions executed in a sequence they receives the
          call from main()
*/
void add();
int main()
{
    printf("\n Start of main");
    add();
    //...
    add();
    //...
    add();
    printf("\n End of main");
}
void add()
{
    int a,b,c;
    printf("\n Enter two nos: ");
    scanf("%d %d",&a,&b);
    c=a+b;
    printf("\n Addition is: %d",c);
}

//=======================================================================================================================

	// II] function with argument without return type

	Note:
		- You can pass any number of arguemnts via call, but while collcting TYPE, SEQUENCE and COUNT must be same.
		- The actual arguments and formal arguments are variables shares, no common space they are stored in the
		  different locations.


	       a	       b
		[   ]		[   ]
		  |		  |
		  |		  |
		x V	        y V
		[   ]		[   ]
*/


void add(int, int);
int main()
{
    int a,b;
    printf("\n Start of main");
    printf("\n Enter two nos: ");
    scanf("%d %d",&a,&b); 
    add(a,b); // variables a and b are actual arguments
    printf("\n End of main");
}
void add(int x,int y) // variables x and y are formal arguments
{ 
    int c;  
    c=x+y;
    printf("\n Addition is: %d",c);
}


III] function without argument with return type

	Note:
		- You can pass anynumber of arguments to function, but function able to return only one argument
		  in response to call.

		- to return the value from called function to calling function return keyword is used.

		- the type of returning value must be returning type of function. if no any return the the returning
		  type is void and if no any returning type is mentioned the bydefault it is int. 

int add();
int main()
{
    int t;
    printf("\n Start of main");
    t=add();
    printf("\n Addition is: %d",t);
    printf("\n End of main");
}
int add()
{
    int a,b,c;
    printf("\n Enter two nos: ");
    scanf("%d %d",&a,&b);
    c=a+b;  
    return c;
}

//----------------------------------------------------------------------------------------------

	IV] function with argument with return type


int add(int, int);
int main()
{
    int a,b,t;
    printf("\n Start of main");
    printf("\n Enter two nos: ");
    scanf("%d %d",&a,&b); 
    t=add(a,b);
    printf("\n Addition is: %d",t);
    printf("\n End of main");
}
int add(int x,int y) 
{ 
    int c;  
    c=x+y;
    return c;
}

//---------------------------------------------------------------------------------------------

		// Recursion: Calling the function from it's own body.

	// WAP to calc the factorial of number

	5! = 5*4*3*2*1			5! --> 5 * 4!
					4! --> 4 * 3!
					3! --> 3 * 2!
					2! --> 2 * 1!
					1! --> 1 
*/
int fact(int n);
int main()
{
	int no,ans;
	printf("\n Enter the no: ");
	scanf("%d",&no);

	ans=fact(no);
}
int fact(int n)
{
	if(n==1)	
	  return 1;
	else
	  return (no* fact(no-1));
}

//------------------------------------------------------------------------------------------------------------------------------

	//  We kno how to reverse the number

int main()
{
	int no,rev;
	
	printf("\n Enter the no: ");
	scanf("%d",&no);

	rev=0;
	while(no!=0)
	{
		rev=(rev*10)+(no%10);
		no=no/10;
	}
	printf("\n Reverse no is: %d",rev);
	return 0;
}


//----------------------------------------------------

	// WAP to find the number is palindrome or not.

int main()
{
	int no,rev,tmp;
	
	printf("\n Enter the no: ");
	scanf("%d",&no);
	tmp=no;

	rev=0;
	while(no!=0)
	{
		rev=(rev*10)+(no%10);
		no=no/10;
	}

	if(rev==tmp)
		printf("\n The number is palindrome");
	else
		printf("\n The number is not palindrome");

	return 0;
}


//========================================================================================================

	// Using the functions we can write

int reverse(int);
char ispalindrome(int);
int main()
{
	int no,t;
	char ch;
	printf("\n Enter the no: ");
	scanf("%d",&no);
	t=reverse(no);
	printf("\n Reverse no is: %d",t);

	ch=ispalindrome(no);
	if(ch=='y')
        printf("\n No is palindrome");
    else
        printf("\n No is not palindrome");
	return 0;
}
char ispalindrome(int n)
{
    int t;
    t=reverse(n);
    if(t==n)
        return 'y';
    else
        return 'n';
}
int reverse(int n)
{
	int rev=0;
	while(n!=0)
	{
		rev=(rev*10)+(n%10);
		n=n/10;
	}
	return rev;
}

//------------------------------------------------------------------------------------------------------------------------

	// WAP to implement following functions to perform the arithmetic operatons and operation expected

		int add(int,int);
		float div(int,int);
		int findmax();
		char isprime(int);


    // If you define the functions before the main() the decl. becomes optional.

int add(int a,int b)
{
    int t;
    t=a+b;
    return t;
}
float div(int x,int y)
{
    float t;
    t=(float)x/y;
    return t;
}
void findmax(int p,int q)
{
   int max;
   max = (p>q) ? p : q ;
   printf("\n The max Number: %d",max);
}
char isprime(int no)
{
    int d;
    char flg='y';

    d=2;
    while(d<=(no/2))
    {
        if(no%d==0)
        {
            flg='n';
            break;
        }
        d++;
    }
    return flg;
}
int main()
{
    int n1,n2,ans;
    float tmp;
    char s;

    printf("\n Enter any two nos: ");
    scanf("%d %d",&n1,&n2);

    ans=add(n1,n2);
    printf("\n The addition of %d and %d is %d",n1,n2,ans);

    tmp=div(n1,n2);
    printf("\n div od %d and %d is %0.2f",n1,n2,tmp);

    findmax(n1,n2);

    s=isprime(n1);
    if(s=='y')
        printf("\n Number is Prime");
    else
        printf("\n Number is Non-Prime");

    return 0;
}


//-------------------------------------------------------------------------------------------

	/// call by value


		a		b
		[ 10 ]	<--->	[ 20 ]     swap

	----------------------------------------		As a and b are different locations than the x and y
								the change will not reflected in x and y.
		x		y					
		[ 10 ]		[ 20 ]	main			so before and after call the values are same
		
		

void swap(int a,int b)	// Indirectly int a=x;	int b=y;
{
    int tmp;
    tmp=a;
    a=b;
    b=tmp;

}
int main()
{
    int x,y;

    printf("\n Enter any two nos: ");
    scanf("%d %d",&x,&y);

    printf("\n Before call x=%d \t y=%d",x,y);
    swap(x,y);
    printf("\n After call x=%d \t y=%d",x,y);

    return 0;
}

//------------------------------------------------------------------------------------------------

	// Call by reference

		*a		*b
		[ 400 ]		[ 500 ]     swap
		   |		   |
	-----------|---------------|--------------		As *p and *q are are pointers and as we are   		           |		   |
		   |		   |				passing the address of x and y, the original 
		x  V		y  V					
		[ 20 ]	<-->	[ 10 ]	    main		are accessed from the function.
	      400              500				 
							     so will see the change before and after the call


void swap(int *p,int *q)	// Indirectly int *a=&x;	int *b=&y;
{
    int tmp;
    tmp=*p;
    *p=*q;
    *q=tmp;
}
int main()
{
    int x,y;

    printf("\n Enter any two nos: ");
    scanf("%d %d",&x,&y);

    printf("\n Before call x=%d \t y=%d",x,y);
    swap(&x,&y);
    printf("\n After call x=%d \t y=%d",x,y);

    return 0;
}

//-----------------------------------------------------------------------------------------

	// Passing the array as a argument:

void display(int[]);
int main()
{
	int x[10],i;

	printf("\n Enter 10 nos: ");
	for(i=0;i<10;i++)
	{
		scanf("%d",&x[i]);
	}
	display(x);
	return 0;
}
void display(int y[5])  // or int y[]
{
    int i;
    printf("\n Elements are: ");
	for(i=0;i<10;i++)
	{
		printf("%6d",y[i]);
	}
}

//----------------------------------------------------------------------------------------

	Now lets see the array is passed by ref or by the value

		x				The chage is reflected at original locations so
		 [][][][][][][][][][]		we can say that the array is always passed by reference.
		t
*/

void incr100(int t[])
{
	int i;
	for(i=0;i<10;i++)
	{
		t[i]=t[i]+100;
	}
}
void display(int y[5])  // or int y[]
{
    int i;
    printf("\n Elements are: ");
	for(i=0;i<10;i++)
	{
		printf("%6d",y[i]);
	}
}
int main()
{
	int x[10],i;

	printf("\n Enter 10 nos: ");
	for(i=0;i<10;i++)
	{
		scanf("%d",&x[i]);
	}
	printf("\n Before call to incr100: ");
	display(x);

	incr100(x);
	
	printf("\n\n Before call to incr100: ");
	display(x);

	return 0;
}


    // You can write the iO methods as..

void display(int y[5])
{
    int i;
    printf("\n Elements are: ");
	for(i=0;i<10;i++)
	{
		printf("%6d",y[i]);
	}
}
void input(int t[])
{
    int i;
    printf("\n Enter 10 nos: ");
	for(i=0;i<10;i++)
	{
		scanf("%d",&t[i]);
	}
}
int main()
{
	int x[10],y[10];

	input(x);
	display(x);

	input(y);
	display(y);


	return 0;
}

*/
//-----------------------------------------------------------------------------------------------------------------

	// We know the array is always passed by reference, means it can be collected in the pointer variable also.

		Then above program can be written as...

void display(int *p)
{
    int i;
    printf("\n Elements are: ");
	for(i=0;i<10;i++)
	{
		// printf("%6d",p[i]);  // Is also OK
		printf("%6d",*(p+i));
	}
}
void input(int *q)
{
    int i;
    printf("\n Enter 10 nos: ");
	for(i=0;i<10;i++)
	{
		// scanf("%d",&q[i]);    // Is also OK
		scanf("%d",(q+i));
	}
}
int main()
{
	int x[10],y[10];

	input(x);
	display(x);

	return 0;
}

//------------------------------------------------------------------------------------------------


	// WAP to get the array of even values from function when an array is passed as a argument.


    // copy and Displaying all even elements from array using function

void getevens(int y[])
{
    int ev[10],cnt=0;
    int i;
    for(i=0;i<10;i++)
    {
        if(y[i]%2==0)
        {
            ev[cnt]=y[i];
            cnt++;
        }
    }
    printf("\n List of even elements: ");
    for(i=0;i<cnt;i++)
    {
        printf("%5d",ev[i]);
    }
}
int main()
{
    int x[10],i;

    printf("\n Enter the 10 nos: ");
    for(i=0;i<10;i++)
    {
        scanf("%d",&x[i]);
    }
    getevens(x);
    printf("\n Original array: ");
    for(i=0;i<10;i++)
    {
        printf("%5d",x[i]);
    }
    return 0;
}

//------------------------------------------------------------------------

        // Now i want to display the array of even numbers in main().

        There are different ways


    // 1a - passing the all arguments by reference

        In such case the array pass is bydefault byref but we need to pass the
        variable byref as shown..

        passing the elements byref. will going to access the original locations(from
        main) in the function. so original locations are modified

void getevens(int y[],int t[],int *cn)
{
    int i;
    for(i=0;i<10;i++)
    {
        if(y[i]%2==0)
        {
            t[*cn]=y[i];
            (*cn)++;
        }
    }
    printf("\n cn=%d",*cn);
}
int main()
{
    int x[10], ev[10],i,cnt=0;;

    printf("\n Enter the 10 nos: ");
    for(i=0;i<10;i++)
    {
        scanf("%d",&x[i]);
    }
    getevens(x,ev,&cnt);
    //-----------------------------------------
    printf("\n List of even elements: ");
    for(i=0;i<cnt;i++)
    {
        printf("%5d",ev[i]);
    }
    //-----------------------------------------
    printf("\n Original array: ");
    for(i=0;i<10;i++)
    {
        printf("%5d",x[i]);
    }
    return 0;
}

//-------------------------------------------------------------------

 // 1b - passing the array (by default by reference) as argument and
 //      returning the count



int getevens(int y[],int t[])
{
    int i,counter=0;
    for(i=0;i<10;i++)
    {
        if(y[i]%2==0)
        {
            t[counter]=y[i];
            counter++;
        }
    }
    return counter;
}
int main()
{
    int x[10], ev[10],i,cnt=0;

    printf("\n Enter the 10 nos: ");
    for(i=0;i<10;i++)
    {
        scanf("%d",&x[i]);
    }
    cnt=getevens(x,ev);
    //-----------------------------------------
    printf("\n List of even elements: ");
    for(i=0;i<cnt;i++)
    {
        printf("%5d",ev[i]);
    }
    //-----------------------------------------
    printf("\n Original array: ");
    for(i=0;i<10;i++)
    {
        printf("%5d",x[i]);
    }
    return 0;
}

//-----------------------------------------------------------------------

    2. Using the static: Normally the life and scope of function is limited
                         within the function but when the member decl as static
                         then it remains in the memory till program ends.
                         (i.e. life changed till the end of program)

    // returning the array from function

int* getevens(int y[],int *cn)
{
    static int ev[10];
    int i, cnt=0;

    for(i=0;i<10;i++)
    {
        if(y[i]%2==0)
        {
            ev[*cn]=y[i];
            (*cn)++;
        }
    }
    return ev;
}
int main()
{
    int x[10],i,cnt=0;
    int *p;

    printf("\n Enter the 10 nos: ");
    for(i=0;i<10;i++)
    {
        scanf("%d",&x[i]);
    }
    p=getevens(x,&cnt);
    //-----------------------------------------
    printf("\n List of even elements: ");
    for(i=0;i<cnt;i++)
    {
        printf("%5d",*(p+i));
    }
    //-----------------------------------------
    printf("\n Original array: ");
    for(i=0;i<10;i++)
    {
        printf("%5d",x[i]);
    }
    return 0;
}

//------------------------------------------------------------------------------

    // 3. Using Global variables
*/

int ev[10],cnt=0;
void getevens(int y[])
{
    int i;
    for(i=0;i<10;i++)
    {
        if(y[i]%2==0)
        {
            ev[cnt]=y[i];
            cnt++;
        }
    }
}
int main()
{
    int x[10],i;

    printf("\n Enter the 10 nos: ");
    for(i=0;i<10;i++)
    {
        scanf("%d",&x[i]);
    }
    getevens(x);
    //-----------------------------------------
    printf("\n List of even elements: ");
    for(i=0;i<cnt;i++)
    {
        printf("%5d",ev[i]);
    }
    //-----------------------------------------
    printf("\n Original array: ");
    for(i=0;i<10;i++)
    {
        printf("%5d",x[i]);
    }
    return 0;
}

//-------------------------------------------------------------------------------------------------

	// Passing the pointer to finction and return the pointer

	// Enter the N numbers and display the list of even number using function.


int ec=0;
int* findevens(int *q,int t)
{
	int i,j;
	int *r;
	for(i=0;i<t;i++)
	{
		if(*(q+i)%2==0)
		{
			ec++;
		}
	}
	r=(int*)malloc(ec*sizeof(int));
	for( i=0,j=0 ; i<t ; i++ )
	{
		if(*(q+i)%2==0)
		{
			*(r+j)=*(q+i);
			j++;
		}
	}
	return r;
}
int main()
{
	int *p,*s,cnt,i;

	printf("\n Enter the element count: ");
	scanf("%d",&cnt);

	p=(int*)malloc(cnt*sizeof(int));

	printf("\n Enter the numbers: ");
	for(i=0;i<cnt;i++)
	{
		scanf("%d",(p+i));
	}

	printf("\n Elements are: ");
	for(i=0;i<cnt;i++)
	{
		printf("%6d",*(p+i));
	}
	s=findevens(p,cnt);
	printf("\n Even Elements are: ");
	for(i=0;i<ec;i++)
	{
		printf("%6d",*(s+i));
	}
	return 0;
}


//----------------------------------------------------------------------------------------------------------

*/
		// Pointer to function


void add(int a,int b)
{
	int z;
	z=a+b;
	printf("\n Addition is: %d",z);
}
void multi(int a,int b)
{
	int z;
	z=a*b;
	printf("\n multi. is: %d",z);
}
int main()
{
	int x,y;
    void (*fptr)(int,int);

	printf("\n Enter the values of x and y: ");
	scanf("%d %d",&x,&y);
	add(x,y);
	multi(x,y);

	fptr=&add;
	fptr(x,y);

	fptr=&multi;
	fptr(x,y);

	return 0;
}
	

	//-------------------------------------------------------------------------------

	- Storage class in C

	A storage class represents the visibility and a location of a variable. It tells from what part of code we can access a 	variable. A storage class in C is used to describe the following things:

		- The variable scope.
		- The location where the variable will be stored.
		- The initialized value of a variable.
		- A lifetime of a variable.
		- Who can access a variable?

		Thus a storage class is used to represent the information about a variable.

		NOTE: A variable is not only associated with a data type, its value but also a storage class.


	There are total four types of standard storage classes.

	auto		It is a default storage class.

	extern		It is a global variable.

	static		It is a local variable which is capable of returning a value even when control is 
			transferred to the function call.

	register	It is a variable which is stored inside a Register.


	Auto Storage Class in C: The scope of an auto variable is limited with the particular block only. Once the control 
				 goes out of the block, the access is destroyed. This means only the block in which the auto 
				 variable is declared can access it.
		
				e.g.
					auto int x;   <---> int x;


	Extern Storage Class: Extern stands for external storage class. Extern storage class is used when we have global functions 
			     or variables which are shared between two or more files.

	create project: 

	// file 1
	#include <stdio.h>
	extern i;
	int main() 
	{
  		 printf("value of the external integer is = %d\n", i);
  	 	 return 0;
	}

	//file 2
	#include <stdio.h>
	i=48;

	Static Storage Class in C:  The static variables are used within function/ file as local static variables. 
				     They can also be used as a global variable

			Static local variable is a local variable that retains and stores its value between function calls 
			or block and remains visible only to the function or block in which it is defined.

			Static global variables are global variables visible only to the file in which it is declared.



void incr()
{
    static int i=5;		// see the uutout with and without static
    printf("\n i=%d",i);
    i++;
}
int main()
{
    int i;
    for(i=0;i<10;i++)
    {
        incr();
    }
    return 0;
}


Register Storage Class: You can use the register storage class when you want to store local variables within functions or blocks 
		        in CPU registers instead of RAM to have quick access to these variables. For example, “counters” are a 
			good candidate to be stored in the register.

			register int x;



Storage Class		Declaration		Storage		Default Initial Value		Scope			Lifetime

auto		Inside a function/block		Memory		Unpredictable		Within the function/block	Within the function/block

register	Inside a function/block		CPU Registers	Garbage			Within the function/block	Within the function/block

extern		Outside all functions		Memory		Zero			Entire the file and other files 
											where the variable is declared 	  program runtime
											as extern	

Static(local)	Inside a function/block		Memory		Zero			Within the function/block	 program runtime

Static(global)	Outside all functions		Memory		Zero			Global				program runtime



	Some important points about the storage class

	- A storage class in C is used to represent additional information about a variable.

	- Storage class represents the scope and lifespan of a variable.

	- It also tells who can access a variable and from where?

	- auto, extern, register, static are the four different storage classes in a C program.

	- A storage class specifier in C language is used to define variables, functions, and parameters.

	- auto is used for a local variable defined within a block or function
	
	- register is used to store the variable in CPU registers rather memory location for quick access.

	- Static is used for both global and local variables. Each one has its use case within a C program.

	- Extern is used for data sharing between C project files.


 //--------------------------------------------------------------------------------------------------------------------

	// calling the function from the function call: (nested call to function)

	// find the max between three nos

int findmax(int a,int b)
{
	if(a>b)
		return a;
	else
		return b;
}

int main()
{
	int n1,n2,n3,max;

	printf("\n Enter 3 nos: ");
	scanf("%d %d %d",&n1,&n2,&n3);

	max=findmax(findmax(n1,n2),n3);

	printf("\n Max from three nos: %d",max);

	return 0;
}


//==============================================================================================================================
//==============================================================================================================================
//==============================================================================================================================

	Structure: It is userdefined data type, used to collect number of elements together under single unit, which may be of 
		   same or different type. It is ordered collection of unindexed elements.

	// Syntax of structure templet (Def. of your own type)

	struct <Tage_Nm>
	{	
		member1;
		member2;			memberN --> Having any type it may be of int, char, float, double, array, pointer
		member3;				    or may be of any userdefined type. 
		.
		.
		.
	};

	// How to create the structure variable

		struct <Tage_Nm> <Variable_nm>;


	Lets create one example:

	      b	 ________________________________________________
		|___________|_____________________|_____________|

		  b.bkid            b.bkpr             b.not ------> Gives the value
		  &b.bkid           &b.bkpr            &b.not -----> Gives the address
    
                  4 bytes	    8 bytes		4 bytes ---> 16 bytes
*/	
	int main()
	{
		struct Book
		{
			int bkid;
			double bkpr;
			int not;
		};

		struct Book b;

		printf("\n Enter the book Id, price and number of topics: ");
		scanf("%d %lf %d",&b.bkid,&b.bkpr,&b.not);

		printf("\n Book ID: %d \t Book Price: %f \t Number of Topics: %d",b.bkid,b.bkpr,b.not);

		return 0;
	}

//----------------------------------------------------------------------------------------------


		// Initilization of structure variable

	struct Book
	{
		int bkid;
		double bkpr;
		int not;
	};

	int main()
	{
		
		struct Book b={182,56.45,10};

		printf("\n Book ID: %d \t Book Price: %f \t Number of Topics: %d",b.bkid,b.bkpr,b.not);

		return 0;
	}



//============================================================================================

        // Input and display the structure data

struct student
{
    int sid;
    char nm[20];
    float per10;
    float per12;
};

int main()
{
    struct student s;

    printf("\n Enter the name of student: ");
    gets(s.nm);

    printf("\n Enter the student ID: ");
    scanf("%d",&s.sid);

    printf("\n Enter the 10th and 12th percentage: ");
    scanf("%f %f",&s.per10,&s.per12);

    printf("\n Student Name: %s \t student ID: %d \t 10th percentage: %0.2f \t 12th percentage: %0.2f",s.nm,s.sid,s.per10,s.per12);

    return 0;
}

//============================================================================================


    // Write a structure to represent all details of item and perform IO operation.

struct item
{
    int icode;
    char inm[50];
    float ipr;
};

int main()
{
    struct item t;

    printf("\n Enter the Name of Item: ");
    gets(t.inm);

    printf("\n Enter the Code and Price of Item: ");
    scanf("%d %f",&t.icode,&t.ipr);

    printf("\n Item Name: %s \t Code: %d \t Price: %0.2f",t.inm, t.icode, t.ipr);
    return 0;
}


//============================================================================================


   // Using the typedef: It is used to define the type, in such case no need of using
   //                    struct keyword.

typedef struct
{
    int icode;
    char inm[50];
    float ipr;
}item;

int main()
{
    item t;  // note here no need of using struct keyword now

    printf("\n Enter the Name of Item: ");
    gets(t.inm);

    printf("\n Enter the Code and Price of Item: ");
    scanf("%d %f",&t.icode,&t.ipr);

    printf("\n Item Name: %s \t Code: %d \t Price: %0.2f",t.inm, t.icode, t.ipr);
    return 0;
}

//============================================================================================

    // Passing the structure variable to function

struct item
{
    int icode;
    char inm[50];
    float ipr;
};

void display(struct item a)
{
    printf("\n Item Name: %s \t Code: %d \t Price: %0.2f",a.inm, a.icode, a.ipr);
}
int main()
{
    struct item t;  // note here no need of using struct keyword now

    printf("\n Enter the Name of Item: ");
    gets(t.inm);

    printf("\n Enter the Code and Price of Item: ");
    scanf("%d %f",&t.icode,&t.ipr);

    display(t);

    return 0;
}


//============================================================================================

    // How the structure variable is passed (By Value or By Reference )

        // Note that the simple variable of structure type is always passed by value

struct item
{
    int icode;
    char inm[50];
    float ipr;
};

void display(struct item a)
{
    printf("\n Item Name: %s \t Code: %d \t Price: %0.2f",a.inm, a.icode, a.ipr);
}

void input(struct item b)
{
    printf("\n Enter the Name of Item: ");
    gets(b.inm);

    printf("\n Enter the Code and Price of Item: ");
    scanf("%d %f",&b.icode,&b.ipr);
}

int main()
{
    struct item t;  // note here no need of using struct keyword now

    input(t);

    display(t);

    return 0;
}//============================================================================================

    //  Passing the structure variable by reference

    // When you are using the pointer of structure type then you have to use
    //  -> as a member access operator in place of .(dot)
*/
struct item
{
    int icode;
    char inm[50];
    float ipr;
};

void display(struct item a)
{
    printf("\n Item Name: %s \t Code: %d \t Price: %0.2f",a.inm, a.icode, a.ipr);
}

void input(struct item *b)
{
    printf("\n Enter the Name of Item: ");
    gets(b->inm);

    printf("\n Enter the Code and Price of Item: ");
    scanf("%d %f",&b->icode,&b->ipr);
}

int main()
{
    struct item t;  // note here no need of using struct keyword now

    input(&t);

    display(t);

    return 0;
}

//-----------------------------------------------------------------------------------------------------------

#include<stdio.h>
struct item
{
    int icode;
    char inm[50];
    float ipr;
};

void display(struct item a)
{
    printf("\n Item Name: %s \t Code: %d \t Price: %0.2f",a.inm, a.icode, a.ipr);
}

struct item maxprice(struct item a1,struct item a2)
{
	if(a1.ipr>a2.ipr)
		return a1;
	else
		return a2;
}
int main()
{
    struct item t1,t2,tmp;  // note here no need of using struct keyword now
    printf("\n Enter the Name of Item: ");
    gets(t1.inm);
    printf("\n Enter the Code and Price of Item: ");
    scanf("%d %f",&t1.icode,&t1.ipr);

    printf("\n Enter the Name of Item: ");
    fflush(stdin);
    gets(t2.inm);
    printf("\n Enter the Code and Price of Item: ");
    scanf("%d %f",&t2.icode,&t2.ipr);

    display(t1);
    display(t2);

    tmp=maxprice(t1,t2);
    printf("\n Details of Item having max Price \n");
    display(tmp);

    return 0;
}


//------------------------------------------------------------------------------------------------------------------------

    // HW: Array of structure variable I/O

		      s          0                  1                 2	
			[        |  |  ]   [        |  |  ]   [       |   |  ]
struct student
{
	char nm[40];
	int rno;
	float per;
};

int main()
{
	struct student s[3];
	int i;

	printf("\n Enter the student info: \n");
	for(i=0;i<3;i++)
	{
		printf("\n Enter the student name: ");
		gets(s[i].nm);

		printf("\n Enter the info of %d student ",i+1);
		scanf("%d %f",&s[i].rno,&s[i].per);
	}

	printf("\n student info: \n");
	for(i=0;i<3;i++)
	{
		printf("\n %s -  "%d  -  %f",s[i].nm, s[i].rno, s[i].per);
	}
	return 0;
}



//-----------------------------------------------------------------------------
*/
        // Passing Array To Function: Array can be passed to function as a argument.

       //  Note like other arrays, Array of structure elements, bydefault passed by ref.

#include<stdio.h>
struct student
{
	char nm[40];
	int rno;
	float per;
};
void input(struct student s[])
{
    int i;
    printf("\n Enter the student info: \n");
	for(i=0;i<3;i++)
	{
		printf("\n Enter the student name: ");
        fflush(stdin);
		gets(s[i].nm);

		printf("\n Enter the rno and percentage: ",i+1);
		scanf("%d %f",&s[i].rno,&s[i].per);
	}
}

void display(struct student s[])
{
    int i;
    printf("\n student info: \n");
	for(i=0;i<3;i++)
	{
		printf("\n %s -  %d  -  %f",s[i].nm, s[i].rno, s[i].per);
	}
}

int main()
{
	struct student s[3];
	int i;

	input(s);

	display(s);

	return 0;
}

//-----------------------------------------------------------------------------------------------------------------------

	// Pointer to structure variables.

			cnt = 4 

	*s                         0             1           2            3
	 [  ] --------------> [          ] [          ] [          ] [          ]


				Every block is having size 48 bytes coz of the members of structure student

				each block has nm, rno and per fields

	We know that the array and pointer having same represention in the memory, so array can be accessed using the pointer 
	notations and the pointer (Dynamically allocated location) can be accessed using the pointer notations.
*/

#include<stdio.h>
struct student
{
	char nm[40];
	int rno;
	float per;
};

int cnt;
void display(struct student s[])
{
    int i;
    printf("\n student info: \n");
	for(i=0;i<cnt;i++)
	{
		printf("\n %s -  %d  -  %f",s[i].nm, s[i].rno, s[i].per);
	}
}

int main()
{
	struct student *s;
	int i;

	printf("\n Enter the student count: ");
	scanf("%d",&cnt);

	s=(struct student*)malloc(cnt*sizeof(struct student));

	printf("\n Enter the student info of %d students:   \n",cnt);

	for(i=0;i<cnt;i++)
	{
		printf("\n Enter the student name: ");
        	fflush(stdin);
		gets(s[i].nm);

		printf("\n Enter the rno and percentage: ",i+1);
		scanf("%d %f",&s[i].rno,&s[i].per);
	}
	display(s);

	return 0;
}


//----------------------------------------------------------------------------------------------------------------

	To access the dynamically allocated location using the pointer notations, we have to use 

		the  -> as member access operator in place of the .(dot) .


#include<stdio.h>
struct student
{
	char nm[40];
	int rno;
	float per;
};

int cnt;
void display(struct student s[])
{
    int i;
    printf("\n student info: \n");
	for(i=0;i<cnt;i++)
	{
		printf("\n %s -  %d  -  %f",(s+i)->nm, (s+i)->rno, (s+i)->per);
	}
}

int main()
{
	struct student *s;
	int i;

	printf("\n Enter the student count: ");
	scanf("%d",&cnt);

	s=(struct student*)malloc(cnt*sizeof(struct student));

	printf("\n Enter the student info of %d students:   \n",cnt);

	for(i=0;i<cnt;i++)
	{
		printf("\n Enter the student name: ");
        	fflush(stdin);
		gets(s[i].nm);

		printf("\n Enter the rno and percentage: ",i+1);
		scanf("%d %f",&(s+i)->rno,&(s+i)->per);
	}
	display(s);

	return 0;
}

//---------------------------------------------------------------------------------------------------------------------------


	// Using Array as a member of structure.

struct student
{
	char nm[40];
	int marks[5];
};

int main()
{
	struct student s;
	int i;

	printf("\n Enter the student name: ");
	gets(s.nm);

	printf("\n Enter the marks in 5 subjects: ");
	for(i=0;i<5;i++)
	{
		scanf("%d",&s.marks[i]);
	}

	printf("\n Student Name: %s",s.nm);
	printf("\n Marks: ");
	for(i=0;i<5;i++)
	{
		printf("%5d",s.marks[i]);
	}
	return 0;
}

//------------------------------------------------------------------------------

#include<stdio.h>
struct student
{
	char nm[40];
	int marks[5];
};

int main()
{
	struct student s1,s2;
	int i;

	printf("\n Enter the student name: ");
	gets(s1.nm);
	printf("\n Enter the marks in 5 subjects: ");
	for(i=0;i<5;i++)
	{
		scanf("%d",&s1.marks[i]);
	}
	printf("\n Student Name: %s",s1.nm);
	printf("\n Marks: ");
	for(i=0;i<5;i++)
	{
		printf("%5d",s1.marks[i]);
	}

	//------------------------------------------------------

	printf("\n Enter the student name: ");
	fflush(stdin);
	gets(s2.nm);
	printf("\n Enter the marks in 5 subjects: ");
	for(i=0;i<5;i++)
	{
		scanf("%d",&s2.marks[i]);
	}
	printf("\n Student Name: %s",s2.nm);
	printf("\n Marks: ");
	for(i=0;i<5;i++)
	{
		printf("%5d",s2.marks[i]);
	}
	return 0;
}
//------------------------------------------------------------------------------

#include<stdio.h>
struct student
{
	char nm[40];
	int marks[5];
};

int main()
{
	struct student s[2];
	int i,j;

    printf("\n Enter the info of 2 students \n");
	for(i=0;i<2;i++)
    {
            printf("\n Enter the name of student %d: ",i+1);
            fflush(stdin);
            gets(s[i].nm);

            printf("\n Enter the marks in 5 subjects: ");
            for(j=0;j<5;j++)
            {
                scanf("%d",&s[i].marks[j]);
            }
    }
    printf("\n List of student \n");
    for(i=0;i<2;i++)
    {
            printf("\n Student %d: %s ",i+1,s[i].nm);
            printf("\n Marks:  ");
            for(j=0;j<5;j++)
            {
               printf("%5d",s[i].marks[j]);
            }
    }
	return 0;
}

//---------------------------------------------------------------------------------------------------------------

		// Pointer as a member structue

struct student
{
	int rno;
	int *sub;
};

int main()
{
	struct student stud;
	int i,subcnt;

	printf("\n Enter the subject count: ");
	scanf("%d",,&subcnt);

	stud.sub=(int*)malloc(cnt*sizeof(int));
	
	printf("\n Enter the Rno: ");
	scanf("%d",&stud.rno);

	printf("\n Enter the marks in %d subjects: ",subcnt);
	for(i=0;i<subcnt;i++)
	{
		scanf("%d",&stud->(sub+i));
	}

	printf("\n Rno: %d", stud.rno);
	printf("\n Marks in %d subjects: ",subcnt);
	for(i=0;i<subcnt;i++)
	{
		printf("%6d",stud->(sub+i));
	}

	return 0;
}

//------------------------------------------------------------------------------
*/

        // pointer as a member

struct student
{
	int rno;
	int *sub; //allocate the memory dynamically but access with Array notations
};

int main()
{
	struct student stud;
	int i,subcnt;

	printf("\n Enter the subject count: ");
	scanf("%d",&subcnt);

	stud.sub=(int*)malloc(subcnt*sizeof(int));

	printf("\n Enter the Rno: ");
	scanf("%d",&stud.rno);

	printf("\n Enter the marks in %d subjects: ",subcnt);
	for(i=0;i<subcnt;i++)
	{
		scanf("%d",&stud.sub[i]);  // -> operator used only when the structure
	}                              // the structure variable gains the space dynamically
                                   // here member of structure gaining the space dynamically
	printf("\n Rno: %d", stud.rno);
	printf("\n Marks in %d subjects: ",subcnt);
	for(i=0;i<subcnt;i++)
	{
		printf("%6d",stud.sub[i]);
	}

	return 0;
}

//--------------------------------------------------------------------------------------------------

	// Variable of another structure as a member of structure

struct date
{
	int day;
	int mon;
	int year;
};
typedef struct
{
    int icode;
    char inm[50];
    float ipr;
    struct date mfdt;
}item;

int main()
{
    item t;  // note here no need of using struct keyword now

    printf("\n Enter the Name of Item: ");
    gets(t.inm);

    printf("\n Enter the Code and Price of Item: ");
    scanf("%d %f",&t.icode,&t.ipr);

    printf("\n Enter the mf. date of Item: ");
    scanf("%d %d %d",&t.mfdt.day, &t.mfdt.mon, &t.mfdt.year);

    printf("\n Item Name: %s \t Code: %d \t Price: %0.2f \t mf.Date: %d / %d / %d",t.inm, t.icode, t.ipr,t.mfdt.day, t.mfdt.mon,t.mfdt.year);
    return 0;
}

//=======================================================================================================

	// Self-referable structure: A structure having one pointer variable of same type.

											*last
											   [ @ ]

											     |
											     V
     *start    	
	[ 200 ] ----> {id-name-per| 400 } ----> {id-name-per| @ }----> {id-name-per| @ }----> {id-name-per| N }
		     200		       400

            data     ref
	{id-name-per| @ } -- This is Node

#include<stdio.h>
struct student
{
	int id;
	char name[50];
	float per;
	struct student *next;
};
int main()
{
	struct student *start=NULL, *last, *tmp;
	int opt;

	while(1)
	{
		printf("\n ---------- Menu ----------\n");
		printf("\n 1.add student to list \n 2.Display student from list \n 3.stop");
		printf("\n Select the option: ");
		scanf("%d",&opt);
		switch(opt)
		{
			case 1:
				tmp=(struct student*)malloc(sizeof(struct student));
				printf("\n Enter the name of student: ");
				fflush(stdin);
				gets(tmp->name);

				printf("\n Enter the id and percentage: ");
				scanf("%d %f",&tmp->id, &tmp->per);
				tmp->next=NULL;

				if(start==NULL)
				{
					start=tmp;
					last=tmp;
				}
				else
				{
					last->next=tmp;
					last=tmp;
				}
				break;
			case 2:

				tmp=start;
				while(tmp)
				{
					printf("{%d-%s-%f}   ",tmp->id,tmp->name,tmp->per);
					tmp=tmp->next;
				}
				break;
			case 3:
				exit(0);
		}
	}
		
	return 0;
}

*/

//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

	//  Dynamic implementation of stack

#include<stdio.h>
struct Node
{
	int data;
	struct Node *next;
};
struct Node *start, *last, *tmp;
int main()
{
	int opt;
	start=NULL;
	while(1)
	{
		printf("\n ----------- Menu ------------\n");
		printf("\n 1. push \n 2.pop \n 3.stop");
		printf("\n select your option: ");
		scanf("%d",&opt);

		switch(opt)
		{
			case 1:
				// create node
				tmp=(struct Node*)malloc(sizeof(struct Node));
				printf("\n Enter the data: ");
				scanf("%d",&tmp->data);
				tmp->next=NULL;

				// insert into list
				if(start==NULL)
				{
					start=tmp;
					last=tmp;
				}
				else
				{
					last->next=tmp;
					last=tmp;	
				}
				break;
			case 2:
				tmp=start;
				if(start==NULL)
				{
					printf("\n Stack is empty");
				}
				else if(tmp->next==NULL)
				{
					start=NULL;
					printf("\n %d is poped",last->data);
				}
				else
				{
					while(tmp->next!=last)
					{
						tmp=tmp->next;
					}
					tmp->next=NULL;
					printf("\n %d is poped",last->data);
					free(last);
					last=tmp;
				}
				break;
			case 3:
				exit(0);

		}
	}
}
//--------------------------------------------------------------------------------------------

	//  Types of Linked List:

		- Singly Linked list.

			struct Node
			{
				int data;
				struct Node *next;
			};
			- last->next=NULL always maintained

		- Doubly Linked list.

			struct Node
			{
				struct Node *prv;
				int data;
				struct Node *next;
			};		
			- last->next=NULL and start->prv=NULL always maintained

		- Circular Linked list.
			* Singly Circular Linked list.
				- The structure is same as singly linked list, 
				  just last->next=start always maintained
				
			* Doubly Circular Linked list.
				- The structure is same as Doubly linked list, 
				  just last->next=start and start->prv=last always maintained


//--------------------------------------------------------------------------------------------

	// Create the Linked list and perform the following operations.

		- Create
		- delete
		- update
		- search
		- sort
		- insert
		- merge
		- split


//--------------------------------------------------------------------------------------------

	// Using Doubly Linked list.
*/


#include<stdio.h>
struct DNode
{
	struct Node *prv;
	int data;
	struct Node *next;
};

struct DNode *start, *last, *tmp;
int main()
{
	int opt;
	start=NULL;

	while(1)
	{
		printf("\n -------- Menu ---------\n");
		printf("\n 1.insert \n 2. display \n 3. stop");

		printf("\n Enter your option: ");
		scanf("%d",&opt);
		switch(opt)
		{
			case 1:
				tmp=(struct DNode*)malloc(sizeof(struct DNode));
				printf("\n Enter the data: ");
				scanf("%d",&tmp->data);
				tmp->prv=NULL;
				tmp->next=NULL;

				if(start==NULL)
				{
					start=tmp;
					last=tmp;
				}
				else
				{
					last->next=tmp;
					tmp->prv=last;
					last=tmp;
				}
				break;
			case 2:
				tmp=start;
				printf("\n In FWD Direction: ");
				while(tmp)
				{
					printf("\t %d",tmp->data);
					tmp=tmp->next;
				}

				tmp=last;
				printf("\n In REV Direction: ");
				while(tmp)
				{
					printf("\t %d",tmp->data);
					tmp=tmp->prv;
				}
				break;
			case 3:
				exit(0);
		}
	}
}

//--------------------------------------------------------------------------------------------------------------
		// singly Circular link list

#include<stdio.h>
struct Node
{
	int data;
	struct Node *next;
};
struct Node *start, *last, *tmp;
int cnt=2;
int main()
{
	int opt,i;
	start=NULL;
	while(1)
	{
		printf("\n ----------- Menu singly linked List ------------\n");
		printf("\n 1. input \n 2.display \n 3.stop");
		printf("\n select your option: ");
		scanf("%d",&opt);

		switch(opt)
		{
			case 1:
				// create node
				tmp=(struct Node*)malloc(sizeof(struct Node));
				printf("\n Enter the data: ");
				scanf("%d",&tmp->data);
				tmp->next=start;

				// insert into list
				if(start==NULL)
				{
					start=tmp;
					last=tmp;
					tmp->next=start;
				}
				else
				{
					last->next=tmp;
					last=tmp;
				}
				cnt++;
				break;
			case 2:
				tmp=start;
				i=0;
				printf("\n Element count %d and Elements are :",cnt-2);
				do
				{
					printf("%5d",tmp->data);
					tmp=tmp->next;
				}while(++i<cnt);
                break;
			case 3:
				exit(0);
		}
	}
}


//-----------------------------------------------------------------------

	// Using Doubly Circular Linked list.
*/


#include<stdio.h>
struct DNode
{
	struct Node *prv;
	int data;
	struct Node *next;
};

struct DNode *start, *last, *tmp;
int cnt=2;
int main()
{
	int opt,i;
	start=NULL;
	last=NULL;

	while(1)
	{
		printf("\n -------- Menu ---------\n");
		printf("\n 1.insert \n 2. display \n 3. stop");

		printf("\n Enter your option: ");
		scanf("%d",&opt);
		switch(opt)
		{
			case 1:
				tmp=(struct DNode*)malloc(sizeof(struct DNode));
				printf("\n Enter the data: ");
				scanf("%d",&tmp->data);
				tmp->prv=last;
				tmp->next=start;

				if(start==NULL)
				{
					start=tmp;
					last=tmp;
					tmp->prv=last;
					tmp->next=start;
				}
				else
				{
					last->next=tmp;
					tmp->prv=last;
					last=tmp;
					start->prv=last;
				}
				cnt++;
				break;
			case 2:
				tmp=start;
				printf("\n In FWD Direction: ");
				i=0;
				do
				{
					printf("\t %d",tmp->data);
					tmp=tmp->next;
				}while(++i<cnt);

				tmp=last;
				printf("\n In REV Direction: ");
				i=0;
				do
				{
					printf("\t %d",tmp->data);
					tmp=tmp->prv;
				}while(++i<cnt);
				break;
			case 3:
				exit(0);
		}
	}
}

//=============================================================================================================================

				//  Union in C

		It is also userdefined data type like a structure. it may hold elements of any
	type and any count. It is just a templet, used to allocate the memory for its variables.

		The memory allocated for the variable of union is equals to the highest memory
	holder element enclosed within the union templet.

	let's see,

	struct Test				union Test
	{					{
		int x;					int x;
		float y;				float y;
		char ch;				char ch;
		double db;				double db;
	};					};

	In both cases, Only templets are created, the memory allocation is remaining.
	
	struct Test t;				union Test t;

	t    (18 bytes location)		 t   (8 bytes location)
        _____________________________		__________________
	|____|_____|_______|________|		|________________|

		  The locations able to store at a time

	x and						x or
	y and						y or
	ch and						ch or
	db						db


union Test
{
	int x;
	float y;
	char ch;
	double db;
};

int main()
{
	union Test t;

	printf("\n Size of Test is: %d",sizeof( union Test));
	
	return 0;
}


//-------------------------------------------------------------------------------

*/

union Test
{
	int x;
	float y;
	char ch;
	double db;
};

int main()
{
	union Test t;
	printf("\n Size of Test is: %d",sizeof( union Test));

	printf("\n Enter the character value: ");
	scanf("%c",&t.ch);
	printf("\n character is %c",t.ch);

	printf("\n Enter the int value: ");
	scanf("%d",&t.x);
	printf("\n int is %d",t.x);

	printf("\n Enter the float value: ");
	scanf("%f",&t.y);
	printf("\n float is %f",t.y);

	printf("\n Enter the double value: ");
	scanf("%lf",&t.db);
	printf("\n int is %lf",t.db);

	return 0;
}

//------------------------------------------------------------------------------


		// Enum or enumeration in C

	It is userdefined data type, which provides the way to assign meaningful names
	to the int values.

		or
	In another words, It is way to create the multiple constants at a time.


	syntax:
		enum <name>{const1, const2,...,constN};

		e.g.

	- In simple decl. the enum defines the constants with values as mentioned below

		enum color{red, green, blue, black};

		red	<--->  0
		green   <--->  1 
		blue    <--->  2
		black   <--->  3

	- You are allowed to choose the values, lets see..!!

		enum color{red, green, blue=20, black, gray=100, pink};

		red	<--->  0
		green   <--->  1 
		blue    <--->  20
		black   <--->  21
		gray    <--->  100
		pink    <--->  101

int main()
{
	enum color{red, green, blue, black};
	
	printf("\n Constant values are: ");
	printf("\t red is %d",red);
	printf("\t green is %d",green);
	printf("\t blue is %d",blue);
	printf("\t black is %d",black);

	enum color{red, green=100, blue, black};
	
	printf("\n Constant values are: ");
	printf("\t red is %d",red);
	printf("\t green is %d",green);
	printf("\t blue is %d",blue);
	printf("\t black is %d",black);

	return 0;
}

//=====================================================================================
	
	// File Handling
	// =============

	We know the functional block diagram of computer.


		 				  CPU  
					_________________________
					|			|
				|----->	|	  CU		|---> sends the command signal to every connected peripherial
				|	|_______________________|
		   Input	|	|			|	 	 Output
		    [ ]		|   |-->|	  ALU		|---|     |--->   [ ]
		     |		|   |	|_______________________|   |	  |
		     |		|   |---|			|<--|	  |
		     |		|-------|	  IM		|	  |
		     |---------------->	|_______________________|---------|
			scanf()		       ^          |	     printf()
					 ______|__________V______
					|			|
					|	  EM		|
					|_______________________|

	Now before starting, we must know about the stream.

		Stream: It is path of channel thw which data flows interms of bits and bytes.

		- std input stream: scanf() creates the std input stream, which will make the connection
		between our program and keyboard.

		- std output stream: printf() creates the std output stream, which will make the connection
		between screen and our program.

	THESE STREAMS ARE CREATED BYDEFAULT, WE DONT HAVE TO TAKE EFFORTS FOR IT, JUST WE WILL GOING TO USE IT.
	AS THE THESE ARE PREDEFINED, THE KEYBOARD IS KNOWN AS STD INPUT DEVICE AND SCREEN IS STD OUTPUT DEVICE.


	** Why and What is file.

		- We know the basic thing behind the program. i.e. we have to take data from the user, store it, process 
		  on it and provide it to the outside world in a expected form.
	
		- When we work on practical applications we need to store the data permanent manner. Till now we used
		  the RAM, which is volatile in nature. Means the data is present there in memory till supply is ON. When you 
		  turn off the supply, the data deleted automatically.

		- So you need to store the data in parmenent manner, and for the you have to use the parmenent storage. i.e. HDD
		  To connect with the External storage (i.e.) HDD, we have to take the efforts to make the connection with external
		  storage.

		- In the internal memory the data is stored in variables, arrays, pointer and stucture variables.
		  In same way files are used to store or to hold the data in external memory. and to deal with that 
		  file we need to refer that file from out program.

		- In C, One structure is there in stdio.h, having name FILE.
		  The pointer of that FILE is decl. int program to refer to the file present in the external storage.
		
			FILE * fp;  	// pointer used to refer the file
		
		- fopen() is a function which will gives you the reference of file passed to it as a argument with the detailed path,
		  for that we need one more parameter, mode i.e perpose of opening the file. (read, write append)

			i.e. syntax:
					file_pointer=fopen("file_path","mode");

	
		Mode	Meaning of Mode				During Inexistence of file
		r	Open for reading.			If the file does not exist, fopen() returns NULL.
		rb	Open for reading in binary mode.	If the file does not exist, fopen() returns NULL.
		w	Open for writing.			If the file exists, its contents are overwritten.
								If the file does not exist, it will be created.
		wb	Open for writing in binary mode.	If the file exists, its contents are overwritten.
								If the file does not exist, it will be created.
		a	Open for append.			Data is added to the end of the file.	If the file does not exist, it will be created.
		ab	Open for append in binary mode. 	Data is added to the end of the file.	If the file does not exist, it will be created.
		r+	Open for both reading and writing.	If the file does not exist, fopen() returns NULL.
		rb+	Open for both reading and writing in binary mode.	If the file does not exist, fopen() returns NULL.
		w+	Open for both reading and writing.	If the file exists, its contents are overwritten.
								If the file does not exist, it will be created.
		wb+	Open for both reading and writing in binary mode.	If the file exists, its contents are overwritten.
										If the file does not exist, it will be created.
		a+	Open for both reading and appending.	If the file does not exist, it will be created.
		ab+	Open for both reading and appending in binary mode.	If the file does not exist, it will be created.


		
		- Now you have to read the data, there are different ways but at start we will start the
		  reading, character by character.
			for that fgetc() is there, having the syntax

			char ch=fgetc(fp);

		 it will gives you the first character from the file and automatically it will refers towards
		 next character.

		- Now at the end you have to close the file using function fclose()

			fclose(fp);

			

	// program to read the the file character by character.

#include<stdio.h>
int main()
{
    FILE *fp;
    char ch='a';
    fp=fopen("f:\\angular\\data.txt","r");
    if(fp==NULL)
        printf("Error...!! while opening the file");
    do
    {
        ch=fgetc(fp);
        if(ch==EOF)
            break;
        printf("%c",ch);
    }while(1);
    fclose(fp);
    return 0;
}





//----------------------------------------------------------------------------


    // WAP to count the number of lines and number of words in the file

#include<stdio.h>
#include<dos.h>
int main()
{
    FILE *fp;
    char ch='a';
    int line=0,word=0;
    fp=fopen("f:\\angular\\data.txt","r");
    if(fp==NULL)
        printf("Error...!! while opening the file");
    do
    {
        ch=fgetc(fp);
        if(ch==EOF)
            break;
        if(ch=='\n')
            line++;

        if(ch==' ')
            word++;
    }while(1);
    fclose(fp);
    printf("\n Line Count: %d \n Word Count: %d",line,word);
    return 0;
}


//================================================================================

        // Using the fgetc() and fputc():

    // Write a program to copy the data from one file into another


#include<stdio.h>
#include<dos.h>
int main()
{
    FILE *fp,*fc;
    char ch='a';
    fp=fopen("f:\\angular\\data.txt","r");
    fc=fopen("f:\\angular\\copydata.txt","w");

    if(fp==NULL)
        printf("Error...!! while opening the file");
    do
    {
        ch=fgetc(fp);
        if(ch==EOF)
            break;

        fputc(ch,fc);
    }while(1);
    fclose(fp);
    return 0;
}


//================================================================================

        // Using the fgetc() and fputc(): using append mode

    // Write a program to copy the data from one file into another

#include<stdio.h>
#include<dos.h>
int main()
{
    FILE *fp,*fc;
    char ch='a';

    // ------ File open ------
    fp=fopen("f:\\angular\\data.txt","r");
    fc=fopen("f:\\angular\\copydata.txt","a"); // append mode: will add the data at the end of file

    // --------Read from one and Write into another ------------
    do
    {
        ch=fgetc(fp);
        if(ch==EOF)
            break;

        fputc(ch,fc);
    }while(1);
    fclose(fp);
    fclose(fc);

    //------- Read the copied data from file ----------

    fc=fopen("f:\\angular\\copydata.txt","r");
    do
    {
        ch=fgetc(fc); //reading from the file
        if(ch==EOF)
            break;
        putchar(ch); // printing to console
    }while(1);
    return 0;
}


//================================================================================

     // Using the fgetc() and fputc(): using w+ and rewind()

    // Write a program to copy the data from one file into another
*/

#include<stdio.h>
#include<dos.h>
int main()
{
    FILE *fp,*fc;
    char ch='a';

    // ------ File open ------
    fp=fopen("f:\\angular\\data.txt","r");
    fc=fopen("f:\\angular\\copydata.txt","w+"); // read and write both

    // --------Read from one and Write into another ------------
    do
    {
        ch=fgetc(fp);
        if(ch==EOF)
            break;
        fputc(ch,fc);
    }while(1);
    fclose(fp);

    //------- Read the copied data from file ----------

    rewind(fc); // will place the file pointer at start again
    do
    {
        ch=fgetc(fc); //reading from the file
        if(ch==EOF)
            break;
        putchar(ch); // printing to console
    }while(1);
    return 0;
}

//===============================================================================================

	// Using fprintf() and fscanf(): used to write the collection of data elements to file.

		fprintf(<file_ptr>,"<format_string>");

#include<stdio.h>
void main()
{
	FILE *fp;
	char str[40];
	char s[50];

	fp=fopen("f:\\angular\\iodata.txt","a+");

	printf("\n Enter any string: ");
	gets(str);
	fprintf(fp,"String is: %s",str);

    	rewind(fp);

	fscanf(fp,"%[^\n]",&s);
	printf("\n iodata is: %s",s);
	fclose(fp);
}

//-------------------------------------------------------------------

	// Using fseek() and ftell()


#include<stdio.h>
void main()
{
	FILE *fp;
    int pos;

	fp=fopen("f:\\angular\\iodata.txt","a+");
	fseek(fp,18,SEEK_SET);
    pos=ftell(fp);
    fprintf("fp","%s","hi hello how are you all");
	fclose(fp);
	printf("\n position is: %d",pos);
}

//------------------------------------------------------------------------

    // Using fgets() and fputs(): IO in terms  of line

*/
#include<stdio.h>
void main()
{
    FILE *fp1, *fp2;
    char str[500];

    fp1=fopen("f:\\angular\\data.txt","r");
	fp2=fopen("f:\\angular\\strdata.txt","a+");

	while(fgets(str,500,fp1))
    {
        printf("%s",str);
        fputs(str,fp2);
    }
    fclose(fp1);
    fclose(fp2);
}
//---------------------------------------------------------------------------------------

		// using getw() putw(): integer read write

#include<stdio.h>
void main()
{
	FILE *fp;
	int no=121;
	int t;

	fp=fopen("f:\\angular\\intdata.txt","w+");
	putw(no,fp);
	rewind(fp);
	t=getw(fp);
	printf("\n int value is: %d",t);
}

//------------------------------------------------------------------------------------

	// using fread() and fwrite():
	// ===========================

#include<stdio.h>
struct person
{
    int uid;
    float wt;
    char nm[40];
};
void main()
{
	FILE *fp;

	struct person p={111,56.34,"ramu"};
	struct person t;

	fp=fopen("f:\\angular\\person.txt","w+");

	fwrite(&p,sizeof(struct person),1,fp);

	rewind(fp);

	fread(&t,sizeof(struct person),1,fp);

	printf("\n %d - %f - %s",t.uid, t.wt, t.nm);

	fclose(fp);
}









